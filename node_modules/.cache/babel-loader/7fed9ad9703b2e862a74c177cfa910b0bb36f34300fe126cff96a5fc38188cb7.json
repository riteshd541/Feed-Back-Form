{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anil kumar\\\\Desktop\\\\techbrj\\\\dynamic-feedback-form\\\\src\\\\FeedbackForm.js\";\n// import React, { Component } from \"react\";\n// import {\n//   Radio,\n//   RadioGroup,\n//   FormControlLabel,\n//   FormControl,\n//   FormLabel,\n//   Button,\n// } from \"@material-ui/core\";\n\n// class FeedbackForm extends Component {\n//   state = {\n//     questions: [],\n//     choices: [],\n//     feedback: {\n//       questions: [],\n//       choices: [],\n//     },\n//     companyLogo: \"\",\n//     unitName: \"\",\n//   };\n\n//   componentDidMount() {\n//     this.fetchQuestions();\n//   }\n\n//   fetchQuestions = () => {\n//     fetch(\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\n//     )\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Network response was not ok\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         if (data.status === 1) {\n//           const questions = data.feedbackQuestions.map((question, index) => ({\n//             question: question,\n//             choices: data.choices[index],\n//             answer: \"\",\n//           }));\n//           this.setState({\n//             questions,\n//             companyLogo: data.companyLogo,\n//             unitName: data.unitName,\n//           });\n//         } else {\n//           throw new Error(data.error_msg || \"Error fetching questions\");\n//         }\n//       })\n//       .catch((error) =>\n//         console.error(\"There was an error fetching the questions:\", error)\n//       );\n//   };\n\n//   handleChoiceChange = (index, choice) => {\n//     const questions = [...this.state.questions];\n//     questions[index].answer = choice;\n//     this.setState({ questions });\n//   };\n\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n//     const feedback = {\n//       questions: this.state.questions.map((q) => q.question),\n//       choices: this.state.questions.map((q) => q.answer),\n//     };\n//     console.log(\"Feedback submitted:\", feedback);\n//     // Here you can also post the feedback to a backend endpoint if required\n//   };\n\n//   renderQuestion = (question, index) => (\n//     <FormControl component=\"fieldset\" key={index}>\n//       <FormLabel component=\"legend\">{question.question}</FormLabel>\n//       <RadioGroup\n//         aria-label={question.question}\n//         name={question.question}\n//         value={question.answer}\n//         onChange={(event) => this.handleChoiceChange(index, event.target.value)}\n//       >\n//         {question.choices.map((choice, choiceIndex) => (\n//           <FormControlLabel\n//             key={choiceIndex}\n//             value={choice}\n//             control={<Radio />}\n//             label={choice}\n//           />\n//         ))}\n//       </RadioGroup>\n//     </FormControl>\n//   );\n\n//   render() {\n//     return (\n//       <div>\n//         <img src={this.state.companyLogo} alt=\"Company Logo\" />\n//         <h2>Feedback for {this.state.unitName}</h2>\n//         <form onSubmit={this.handleSubmit}>\n//           {this.state.questions.map(this.renderQuestion)}\n//           <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n//             Submit Feedback\n//           </Button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// export default FeedbackForm;\n\n// import React, { Component } from \"react\";\n// import {\n//   Radio,\n//   RadioGroup,\n//   FormControlLabel,\n//   FormControl,\n//   FormLabel,\n//   Button,\n//   Typography,\n//   Container,\n//   Grid,\n//   Paper,\n// } from \"@material-ui/core\";\n\n// class FeedbackForm extends Component {\n//   state = {\n//     questions: [],\n//     choices: [],\n//     feedback: {\n//       questions: [],\n//       choices: [],\n//     },\n//     companyLogo: \"\",\n//     unitName: \"\",\n//   };\n\n//   componentDidMount() {\n//     this.fetchQuestions();\n//   }\n\n//   fetchQuestions = () => {\n//     fetch(\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\n//     )\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Network response was not ok\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         if (data.status === 1) {\n//           const questions = data.feedbackQuestions.map((question, index) => ({\n//             question: question,\n//             choices: data.choices[index],\n//             answer: \"\",\n//           }));\n//           this.setState({\n//             questions,\n//             companyLogo: data.companyLogo,\n//             unitName: data.unitName,\n//           });\n//         } else {\n//           throw new Error(data.error_msg || \"Error fetching questions\");\n//         }\n//       })\n//       .catch((error) =>\n//         console.error(\"There was an error fetching the questions:\", error)\n//       );\n//   };\n\n//   handleChoiceChange = (index, choice) => {\n//     const questions = [...this.state.questions];\n//     questions[index].answer = choice;\n//     this.setState({ questions });\n//   };\n\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n//     const feedback = {\n//       questions: this.state.questions.map((q) => q.question),\n//       choices: this.state.questions.map((q) => q.answer),\n//     };\n//     console.log(\"Feedback submitted:\", feedback);\n//     // Here you can also post the feedback to a backend endpoint if required\n//   };\n\n//   render() {\n//     return (\n//       <Container>\n//         <Grid container spacing={3}>\n//           <Grid item xs={12}>\n//             <img\n//               src={this.state.companyLogo}\n//               alt=\"Company Logo\"\n//               style={{ width: \"150px\", marginBottom: \"20px\" }}\n//             />\n//             <Typography variant=\"h4\">\n//               Feedback for {this.state.unitName}\n//             </Typography>\n//           </Grid>\n//           <Grid item xs={12}>\n//             <form onSubmit={this.handleSubmit}>\n//               <Grid container spacing={3}>\n//                 {this.state.questions.map((question, index) => (\n//                   <React.Fragment key={index}>\n//                     <Grid item xs={12} sm={6}>\n//                       <Paper elevation={3} style={{ padding: \"20px\" }}>\n//                         <FormControl component=\"fieldset\">\n//                           <FormLabel component=\"legend\">\n//                             <Typography variant=\"h6\">\n//                               {question.question}\n//                             </Typography>\n//                           </FormLabel>\n//                         </FormControl>\n//                       </Paper>\n//                     </Grid>\n//                     <Grid item xs={12} sm={6}>\n//                       <Paper elevation={3} style={{ padding: \"20px\" }}>\n//                         <FormControl component=\"fieldset\">\n//                           <RadioGroup\n//                             aria-label={question.question}\n//                             name={question.question}\n//                             value={question.answer}\n//                             onChange={(event) =>\n//                               this.handleChoiceChange(index, event.target.value)\n//                             }\n//                           >\n//                             {question.choices.map((choice, choiceIndex) => (\n//                               <FormControlLabel\n//                                 key={choiceIndex}\n//                                 value={choice}\n//                                 control={<Radio />}\n//                                 label={<Typography>{choice}</Typography>}\n//                               />\n//                             ))}\n//                           </RadioGroup>\n//                         </FormControl>\n//                       </Paper>\n//                     </Grid>\n//                   </React.Fragment>\n//                 ))}\n//               </Grid>\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n//                 Submit Feedback\n//               </Button>\n//             </form>\n//           </Grid>\n//         </Grid>\n//       </Container>\n//     );\n//   }\n// }\n\n// export default FeedbackForm;\n\nimport React, { Component } from \"react\";\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Button, Container, Typography, Paper, Grid, makeStyles } from \"@material-ui/core\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginTop: theme.spacing(3),\n    padding: theme.spacing(3)\n  },\n  formControl: {\n    margin: theme.spacing(3)\n  },\n  button: {\n    marginTop: theme.spacing(2)\n  },\n  logo: {\n    maxWidth: 150,\n    marginBottom: theme.spacing(2)\n  }\n}));\nclass FeedbackForm extends Component {\n  constructor(...args) {\n    var _s = $RefreshSig$();\n    super(...args);\n    this.state = {\n      questions: [],\n      choices: [],\n      feedback: {\n        questions: [],\n        choices: []\n      },\n      companyLogo: \"\",\n      unitName: \"\"\n    };\n    this.fetchQuestions = () => {\n      fetch(\"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\").then(response => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      }).then(data => {\n        if (data.status === 1) {\n          const questions = data.feedbackQuestions.map((question, index) => ({\n            question: question,\n            choices: data.choices[index],\n            answer: \"\"\n          }));\n          this.setState({\n            questions,\n            companyLogo: data.companyLogo,\n            unitName: data.unitName\n          });\n        } else {\n          throw new Error(data.error_msg || \"Error fetching questions\");\n        }\n      }).catch(error => console.error(\"There was an error fetching the questions:\", error));\n    };\n    this.handleChoiceChange = (index, choice) => {\n      const questions = [...this.state.questions];\n      questions[index].answer = choice;\n      this.setState({\n        questions\n      });\n    };\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const feedback = {\n        questions: this.state.questions.map(q => q.question),\n        choices: this.state.questions.map(q => q.answer)\n      };\n      console.log(\"Feedback submitted:\", feedback);\n      // Here you can also post the feedback to a backend endpoint if required\n    };\n    this.renderQuestion = _s((question, index) => {\n      _s();\n      const classes = useStyles();\n      return /*#__PURE__*/React.createElement(FormControl, {\n        component: \"fieldset\",\n        key: index,\n        className: classes.formControl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        component: \"legend\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 9\n        }\n      }, question.question), /*#__PURE__*/React.createElement(RadioGroup, {\n        \"aria-label\": question.question,\n        name: question.question,\n        value: question.answer,\n        onChange: event => this.handleChoiceChange(index, event.target.value),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 9\n        }\n      }, question.choices.map((choice, choiceIndex) => /*#__PURE__*/React.createElement(FormControlLabel, {\n        key: choiceIndex,\n        value: choice,\n        control: /*#__PURE__*/React.createElement(Radio, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 24\n          }\n        }),\n        label: choice,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 13\n        }\n      }))));\n    }, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n      return [useStyles];\n    });\n  }\n  componentDidMount() {\n    this.fetchQuestions();\n  }\n  render() {\n    const classes = useStyles();\n    return /*#__PURE__*/React.createElement(Container, {\n      maxWidth: \"sm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Paper, {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.companyLogo,\n      alt: \"Company Logo\",\n      className: classes.logo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 13\n      }\n    }, \"Feedback for \", this.state.unitName), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 13\n      }\n    }, this.state.questions.map((question, index) => this.renderQuestion(question, index)), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      className: classes.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 15\n      }\n    }, \"Submit Feedback\")))));\n  }\n}\n\n// Note: Since `makeStyles` hook cannot be directly used inside a class component,\n// you may need to either convert this component to a functional component\n// or use this styling approach differently, perhaps by using withStyles HOC.\nexport default FeedbackForm;","map":{"version":3,"names":["React","Component","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","Button","Container","Typography","Paper","Grid","makeStyles","useStyles","theme","root","marginTop","spacing","padding","formControl","margin","button","logo","maxWidth","marginBottom","FeedbackForm","constructor","args","_s","$RefreshSig$","state","questions","choices","feedback","companyLogo","unitName","fetchQuestions","fetch","then","response","ok","Error","json","data","status","feedbackQuestions","map","question","index","answer","setState","error_msg","catch","error","console","handleChoiceChange","choice","handleSubmit","event","preventDefault","q","log","renderQuestion","classes","createElement","component","key","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","name","value","onChange","target","choiceIndex","control","label","componentDidMount","render","container","direction","alignItems","src","alt","variant","gutterBottom","onSubmit","type","color"],"sources":["C:/Users/anil kumar/Desktop/techbrj/dynamic-feedback-form/src/FeedbackForm.js"],"sourcesContent":["// import React, { Component } from \"react\";\r\n// import {\r\n//   Radio,\r\n//   RadioGroup,\r\n//   FormControlLabel,\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Button,\r\n// } from \"@material-ui/core\";\r\n\r\n// class FeedbackForm extends Component {\r\n//   state = {\r\n//     questions: [],\r\n//     choices: [],\r\n//     feedback: {\r\n//       questions: [],\r\n//       choices: [],\r\n//     },\r\n//     companyLogo: \"\",\r\n//     unitName: \"\",\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     this.fetchQuestions();\r\n//   }\r\n\r\n//   fetchQuestions = () => {\r\n//     fetch(\r\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n//     )\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Network response was not ok\");\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         if (data.status === 1) {\r\n//           const questions = data.feedbackQuestions.map((question, index) => ({\r\n//             question: question,\r\n//             choices: data.choices[index],\r\n//             answer: \"\",\r\n//           }));\r\n//           this.setState({\r\n//             questions,\r\n//             companyLogo: data.companyLogo,\r\n//             unitName: data.unitName,\r\n//           });\r\n//         } else {\r\n//           throw new Error(data.error_msg || \"Error fetching questions\");\r\n//         }\r\n//       })\r\n//       .catch((error) =>\r\n//         console.error(\"There was an error fetching the questions:\", error)\r\n//       );\r\n//   };\r\n\r\n//   handleChoiceChange = (index, choice) => {\r\n//     const questions = [...this.state.questions];\r\n//     questions[index].answer = choice;\r\n//     this.setState({ questions });\r\n//   };\r\n\r\n//   handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n//     const feedback = {\r\n//       questions: this.state.questions.map((q) => q.question),\r\n//       choices: this.state.questions.map((q) => q.answer),\r\n//     };\r\n//     console.log(\"Feedback submitted:\", feedback);\r\n//     // Here you can also post the feedback to a backend endpoint if required\r\n//   };\r\n\r\n//   renderQuestion = (question, index) => (\r\n//     <FormControl component=\"fieldset\" key={index}>\r\n//       <FormLabel component=\"legend\">{question.question}</FormLabel>\r\n//       <RadioGroup\r\n//         aria-label={question.question}\r\n//         name={question.question}\r\n//         value={question.answer}\r\n//         onChange={(event) => this.handleChoiceChange(index, event.target.value)}\r\n//       >\r\n//         {question.choices.map((choice, choiceIndex) => (\r\n//           <FormControlLabel\r\n//             key={choiceIndex}\r\n//             value={choice}\r\n//             control={<Radio />}\r\n//             label={choice}\r\n//           />\r\n//         ))}\r\n//       </RadioGroup>\r\n//     </FormControl>\r\n//   );\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <img src={this.state.companyLogo} alt=\"Company Logo\" />\r\n//         <h2>Feedback for {this.state.unitName}</h2>\r\n//         <form onSubmit={this.handleSubmit}>\r\n//           {this.state.questions.map(this.renderQuestion)}\r\n//           <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n//             Submit Feedback\r\n//           </Button>\r\n//         </form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default FeedbackForm;\r\n\r\n// import React, { Component } from \"react\";\r\n// import {\r\n//   Radio,\r\n//   RadioGroup,\r\n//   FormControlLabel,\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Button,\r\n//   Typography,\r\n//   Container,\r\n//   Grid,\r\n//   Paper,\r\n// } from \"@material-ui/core\";\r\n\r\n// class FeedbackForm extends Component {\r\n//   state = {\r\n//     questions: [],\r\n//     choices: [],\r\n//     feedback: {\r\n//       questions: [],\r\n//       choices: [],\r\n//     },\r\n//     companyLogo: \"\",\r\n//     unitName: \"\",\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     this.fetchQuestions();\r\n//   }\r\n\r\n//   fetchQuestions = () => {\r\n//     fetch(\r\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n//     )\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Network response was not ok\");\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         if (data.status === 1) {\r\n//           const questions = data.feedbackQuestions.map((question, index) => ({\r\n//             question: question,\r\n//             choices: data.choices[index],\r\n//             answer: \"\",\r\n//           }));\r\n//           this.setState({\r\n//             questions,\r\n//             companyLogo: data.companyLogo,\r\n//             unitName: data.unitName,\r\n//           });\r\n//         } else {\r\n//           throw new Error(data.error_msg || \"Error fetching questions\");\r\n//         }\r\n//       })\r\n//       .catch((error) =>\r\n//         console.error(\"There was an error fetching the questions:\", error)\r\n//       );\r\n//   };\r\n\r\n//   handleChoiceChange = (index, choice) => {\r\n//     const questions = [...this.state.questions];\r\n//     questions[index].answer = choice;\r\n//     this.setState({ questions });\r\n//   };\r\n\r\n//   handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n//     const feedback = {\r\n//       questions: this.state.questions.map((q) => q.question),\r\n//       choices: this.state.questions.map((q) => q.answer),\r\n//     };\r\n//     console.log(\"Feedback submitted:\", feedback);\r\n//     // Here you can also post the feedback to a backend endpoint if required\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <Container>\r\n//         <Grid container spacing={3}>\r\n//           <Grid item xs={12}>\r\n//             <img\r\n//               src={this.state.companyLogo}\r\n//               alt=\"Company Logo\"\r\n//               style={{ width: \"150px\", marginBottom: \"20px\" }}\r\n//             />\r\n//             <Typography variant=\"h4\">\r\n//               Feedback for {this.state.unitName}\r\n//             </Typography>\r\n//           </Grid>\r\n//           <Grid item xs={12}>\r\n//             <form onSubmit={this.handleSubmit}>\r\n//               <Grid container spacing={3}>\r\n//                 {this.state.questions.map((question, index) => (\r\n//                   <React.Fragment key={index}>\r\n//                     <Grid item xs={12} sm={6}>\r\n//                       <Paper elevation={3} style={{ padding: \"20px\" }}>\r\n//                         <FormControl component=\"fieldset\">\r\n//                           <FormLabel component=\"legend\">\r\n//                             <Typography variant=\"h6\">\r\n//                               {question.question}\r\n//                             </Typography>\r\n//                           </FormLabel>\r\n//                         </FormControl>\r\n//                       </Paper>\r\n//                     </Grid>\r\n//                     <Grid item xs={12} sm={6}>\r\n//                       <Paper elevation={3} style={{ padding: \"20px\" }}>\r\n//                         <FormControl component=\"fieldset\">\r\n//                           <RadioGroup\r\n//                             aria-label={question.question}\r\n//                             name={question.question}\r\n//                             value={question.answer}\r\n//                             onChange={(event) =>\r\n//                               this.handleChoiceChange(index, event.target.value)\r\n//                             }\r\n//                           >\r\n//                             {question.choices.map((choice, choiceIndex) => (\r\n//                               <FormControlLabel\r\n//                                 key={choiceIndex}\r\n//                                 value={choice}\r\n//                                 control={<Radio />}\r\n//                                 label={<Typography>{choice}</Typography>}\r\n//                               />\r\n//                             ))}\r\n//                           </RadioGroup>\r\n//                         </FormControl>\r\n//                       </Paper>\r\n//                     </Grid>\r\n//                   </React.Fragment>\r\n//                 ))}\r\n//               </Grid>\r\n//               <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n//                 Submit Feedback\r\n//               </Button>\r\n//             </form>\r\n//           </Grid>\r\n//         </Grid>\r\n//       </Container>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default FeedbackForm;\r\n\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n  Button,\r\n  Container,\r\n  Typography,\r\n  Paper,\r\n  Grid,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    marginTop: theme.spacing(3),\r\n    padding: theme.spacing(3),\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(3),\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  logo: {\r\n    maxWidth: 150,\r\n    marginBottom: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nclass FeedbackForm extends Component {\r\n  state = {\r\n    questions: [],\r\n    choices: [],\r\n    feedback: {\r\n      questions: [],\r\n      choices: [],\r\n    },\r\n    companyLogo: \"\",\r\n    unitName: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchQuestions();\r\n  }\r\n\r\n  fetchQuestions = () => {\r\n    fetch(\r\n      \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response was not ok\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.status === 1) {\r\n          const questions = data.feedbackQuestions.map((question, index) => ({\r\n            question: question,\r\n            choices: data.choices[index],\r\n            answer: \"\",\r\n          }));\r\n          this.setState({\r\n            questions,\r\n            companyLogo: data.companyLogo,\r\n            unitName: data.unitName,\r\n          });\r\n        } else {\r\n          throw new Error(data.error_msg || \"Error fetching questions\");\r\n        }\r\n      })\r\n      .catch((error) =>\r\n        console.error(\"There was an error fetching the questions:\", error)\r\n      );\r\n  };\r\n\r\n  handleChoiceChange = (index, choice) => {\r\n    const questions = [...this.state.questions];\r\n    questions[index].answer = choice;\r\n    this.setState({ questions });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const feedback = {\r\n      questions: this.state.questions.map((q) => q.question),\r\n      choices: this.state.questions.map((q) => q.answer),\r\n    };\r\n    console.log(\"Feedback submitted:\", feedback);\r\n    // Here you can also post the feedback to a backend endpoint if required\r\n  };\r\n\r\n  renderQuestion = (question, index) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <FormControl\r\n        component=\"fieldset\"\r\n        key={index}\r\n        className={classes.formControl}\r\n      >\r\n        <FormLabel component=\"legend\">{question.question}</FormLabel>\r\n        <RadioGroup\r\n          aria-label={question.question}\r\n          name={question.question}\r\n          value={question.answer}\r\n          onChange={(event) =>\r\n            this.handleChoiceChange(index, event.target.value)\r\n          }\r\n        >\r\n          {question.choices.map((choice, choiceIndex) => (\r\n            <FormControlLabel\r\n              key={choiceIndex}\r\n              value={choice}\r\n              control={<Radio />}\r\n              label={choice}\r\n            />\r\n          ))}\r\n        </RadioGroup>\r\n      </FormControl>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n      <Container maxWidth=\"sm\">\r\n        <Paper className={classes.root}>\r\n          <Grid container direction=\"column\" alignItems=\"center\">\r\n            <img\r\n              src={this.state.companyLogo}\r\n              alt=\"Company Logo\"\r\n              className={classes.logo}\r\n            />\r\n            <Typography variant=\"h5\" gutterBottom>\r\n              Feedback for {this.state.unitName}\r\n            </Typography>\r\n            <form onSubmit={this.handleSubmit}>\r\n              {this.state.questions.map((question, index) =>\r\n                this.renderQuestion(question, index)\r\n              )}\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.button}\r\n              >\r\n                Submit Feedback\r\n              </Button>\r\n            </form>\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n// Note: Since `makeStyles` hook cannot be directly used inside a class component,\r\n// you may need to either convert this component to a functional component\r\n// or use this styling approach differently, perhaps by using withStyles HOC.\r\nexport default FeedbackForm;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SACEC,KAAK,EACLC,UAAU,EACVC,gBAAgB,EAChBC,WAAW,EACXC,SAAS,EACTC,MAAM,EACNC,SAAS,EACTC,UAAU,EACVC,KAAK,EACLC,IAAI,EACJC,UAAU,QACL,mBAAmB;AAE1B,MAAMC,SAAS,GAAGD,UAAU,CAAEE,KAAK,KAAM;EACvCC,IAAI,EAAE;IACJC,SAAS,EAAEF,KAAK,CAACG,OAAO,CAAC,CAAC,CAAC;IAC3BC,OAAO,EAAEJ,KAAK,CAACG,OAAO,CAAC,CAAC;EAC1B,CAAC;EACDE,WAAW,EAAE;IACXC,MAAM,EAAEN,KAAK,CAACG,OAAO,CAAC,CAAC;EACzB,CAAC;EACDI,MAAM,EAAE;IACNL,SAAS,EAAEF,KAAK,CAACG,OAAO,CAAC,CAAC;EAC5B,CAAC;EACDK,IAAI,EAAE;IACJC,QAAQ,EAAE,GAAG;IACbC,YAAY,EAAEV,KAAK,CAACG,OAAO,CAAC,CAAC;EAC/B;AACF,CAAC,CAAC,CAAC;AAEH,MAAMQ,YAAY,SAASxB,SAAS,CAAC;EAAAyB,YAAA,GAAAC,IAAA;IAAA,IAAAC,EAAA,GAAAC,YAAA;IAAA,SAAAF,IAAA;IAAA,KACnCG,KAAK,GAAG;MACNC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE;QACRF,SAAS,EAAE,EAAE;QACbC,OAAO,EAAE;MACX,CAAC;MACDE,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE;IACZ,CAAC;IAAA,KAMDC,cAAc,GAAG,MAAM;MACrBC,KAAK,CACH,8EACF,CAAC,CACEC,IAAI,CAAEC,QAAQ,IAAK;QAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxB,CAAC,CAAC,CACDJ,IAAI,CAAEK,IAAI,IAAK;QACd,IAAIA,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;UACrB,MAAMb,SAAS,GAAGY,IAAI,CAACE,iBAAiB,CAACC,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,MAAM;YACjED,QAAQ,EAAEA,QAAQ;YAClBf,OAAO,EAAEW,IAAI,CAACX,OAAO,CAACgB,KAAK,CAAC;YAC5BC,MAAM,EAAE;UACV,CAAC,CAAC,CAAC;UACH,IAAI,CAACC,QAAQ,CAAC;YACZnB,SAAS;YACTG,WAAW,EAAES,IAAI,CAACT,WAAW;YAC7BC,QAAQ,EAAEQ,IAAI,CAACR;UACjB,CAAC,CAAC;QACJ,CAAC,MAAM;UACL,MAAM,IAAIM,KAAK,CAACE,IAAI,CAACQ,SAAS,IAAI,0BAA0B,CAAC;QAC/D;MACF,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IACXC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CACnE,CAAC;IACL,CAAC;IAAA,KAEDE,kBAAkB,GAAG,CAACP,KAAK,EAAEQ,MAAM,KAAK;MACtC,MAAMzB,SAAS,GAAG,CAAC,GAAG,IAAI,CAACD,KAAK,CAACC,SAAS,CAAC;MAC3CA,SAAS,CAACiB,KAAK,CAAC,CAACC,MAAM,GAAGO,MAAM;MAChC,IAAI,CAACN,QAAQ,CAAC;QAAEnB;MAAU,CAAC,CAAC;IAC9B,CAAC;IAAA,KAED0B,YAAY,GAAIC,KAAK,IAAK;MACxBA,KAAK,CAACC,cAAc,CAAC,CAAC;MACtB,MAAM1B,QAAQ,GAAG;QACfF,SAAS,EAAE,IAAI,CAACD,KAAK,CAACC,SAAS,CAACe,GAAG,CAAEc,CAAC,IAAKA,CAAC,CAACb,QAAQ,CAAC;QACtDf,OAAO,EAAE,IAAI,CAACF,KAAK,CAACC,SAAS,CAACe,GAAG,CAAEc,CAAC,IAAKA,CAAC,CAACX,MAAM;MACnD,CAAC;MACDK,OAAO,CAACO,GAAG,CAAC,qBAAqB,EAAE5B,QAAQ,CAAC;MAC5C;IACF,CAAC;IAAA,KAED6B,cAAc,GAAAlC,EAAA,CAAG,CAACmB,QAAQ,EAAEC,KAAK,KAAK;MAAApB,EAAA;MACpC,MAAMmC,OAAO,GAAGlD,SAAS,CAAC,CAAC;MAE3B,oBACEb,KAAA,CAAAgE,aAAA,CAAC3D,WAAW;QACV4D,SAAS,EAAC,UAAU;QACpBC,GAAG,EAAElB,KAAM;QACXmB,SAAS,EAAEJ,OAAO,CAAC5C,WAAY;QAAAiD,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,gBAE/BzE,KAAA,CAAAgE,aAAA,CAAC1D,SAAS;QAAC2D,SAAS,EAAC,QAAQ;QAAAG,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GAAE1B,QAAQ,CAACA,QAAoB,CAAC,eAC7D/C,KAAA,CAAAgE,aAAA,CAAC7D,UAAU;QACT,cAAY4C,QAAQ,CAACA,QAAS;QAC9B2B,IAAI,EAAE3B,QAAQ,CAACA,QAAS;QACxB4B,KAAK,EAAE5B,QAAQ,CAACE,MAAO;QACvB2B,QAAQ,EAAGlB,KAAK,IACd,IAAI,CAACH,kBAAkB,CAACP,KAAK,EAAEU,KAAK,CAACmB,MAAM,CAACF,KAAK,CAClD;QAAAP,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GAEA1B,QAAQ,CAACf,OAAO,CAACc,GAAG,CAAC,CAACU,MAAM,EAAEsB,WAAW,kBACxC9E,KAAA,CAAAgE,aAAA,CAAC5D,gBAAgB;QACf8D,GAAG,EAAEY,WAAY;QACjBH,KAAK,EAAEnB,MAAO;QACduB,OAAO,eAAE/E,KAAA,CAAAgE,aAAA,CAAC9D,KAAK;UAAAkE,MAAA;UAAAC,QAAA;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAA,CAAE,CAAE;QACnBO,KAAK,EAAExB,MAAO;QAAAY,MAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,CACf,CACF,CACS,CACD,CAAC;IAElB,CAAC;MAAA,QA5BiB5D,SAAS;IAAA;EAAA;EApD3BoE,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAAC7C,cAAc,CAAC,CAAC;EACvB;EAgFA8C,MAAMA,CAAA,EAAG;IACP,MAAMnB,OAAO,GAAGlD,SAAS,CAAC,CAAC;IAE3B,oBACEb,KAAA,CAAAgE,aAAA,CAACxD,SAAS;MAACe,QAAQ,EAAC,IAAI;MAAA6C,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACtBzE,KAAA,CAAAgE,aAAA,CAACtD,KAAK;MAACyD,SAAS,EAAEJ,OAAO,CAAChD,IAAK;MAAAqD,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBAC7BzE,KAAA,CAAAgE,aAAA,CAACrD,IAAI;MAACwE,SAAS;MAACC,SAAS,EAAC,QAAQ;MAACC,UAAU,EAAC,QAAQ;MAAAjB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,gBACpDzE,KAAA,CAAAgE,aAAA;MACEsB,GAAG,EAAE,IAAI,CAACxD,KAAK,CAACI,WAAY;MAC5BqD,GAAG,EAAC,cAAc;MAClBpB,SAAS,EAAEJ,OAAO,CAACzC,IAAK;MAAA8C,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,CACzB,CAAC,eACFzE,KAAA,CAAAgE,aAAA,CAACvD,UAAU;MAAC+E,OAAO,EAAC,IAAI;MAACC,YAAY;MAAArB,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAAC,eACvB,EAAC,IAAI,CAAC3C,KAAK,CAACK,QACf,CAAC,eACbnC,KAAA,CAAAgE,aAAA;MAAM0B,QAAQ,EAAE,IAAI,CAACjC,YAAa;MAAAW,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAC/B,IAAI,CAAC3C,KAAK,CAACC,SAAS,CAACe,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,KACxC,IAAI,CAACc,cAAc,CAACf,QAAQ,EAAEC,KAAK,CACrC,CAAC,eACDhD,KAAA,CAAAgE,aAAA,CAACzD,MAAM;MACLoF,IAAI,EAAC,QAAQ;MACbH,OAAO,EAAC,WAAW;MACnBI,KAAK,EAAC,SAAS;MACfzB,SAAS,EAAEJ,OAAO,CAAC1C,MAAO;MAAA+C,MAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GAC3B,iBAEO,CACJ,CACF,CACD,CACE,CAAC;EAEhB;AACF;;AAEA;AACA;AACA;AACA,eAAehD,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}