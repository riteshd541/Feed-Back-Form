{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anil kumar\\\\Desktop\\\\techbrj\\\\dynamic-feedback-form\\\\src\\\\FeedbackForm.js\";\n// // import React, { Component } from \"react\";\n// // import {\n// //   Radio,\n// //   FormControlLabel,\n// //   FormControl,\n// //   FormLabel,\n// //   Button,\n// //   Typography,\n// //   Container,\n// //   Table,\n// //   TableBody,\n// //   TableRow,\n// //   TableCell,\n// //   Grid,\n// //   Dialog,\n// //   DialogTitle,\n// //   DialogContent,\n// //   DialogContentText,\n// // } from \"@material-ui/core\";\n\n// // class FeedbackForm extends Component {\n// //   state = {\n// //     questions: [],\n// //     choices: [],\n// //     feedback: {\n// //       questions: [],\n// //       choices: [],\n// //     },\n// //     companyLogo: \"\",\n// //     unitName: \"\",\n// //     showDialog: false, // State to control dialog visibility\n// //   };\n\n// //   componentDidMount() {\n// //     this.fetchQuestions();\n// //   }\n\n// //   fetchQuestions = () => {\n// //     fetch(\n// //       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\n// //     )\n// //       .then((response) => {\n// //         if (!response.ok) {\n// //           throw new Error(\"Network response was not ok\");\n// //         }\n// //         return response.json();\n// //       })\n// //       .then((data) => {\n// //         if (data.status === 1) {\n// //           const questions = data.feedbackQuestions.map((question, index) => ({\n// //             question: question,\n// //             choices: data.choices[index],\n// //             answer: \"\",\n// //           }));\n// //           this.setState({\n// //             questions,\n// //             companyLogo: data.companyLogo,\n// //             unitName: data.unitName,\n// //           });\n// //         } else {\n// //           throw new Error(data.error_msg || \"Error fetching questions\");\n// //         }\n// //       })\n// //       .catch((error) =>\n// //         console.error(\"There was an error fetching the questions:\", error)\n// //       );\n// //   };\n\n// //   handleChoiceChange = (index, choice) => {\n// //     const questions = [...this.state.questions];\n// //     questions[index].answer = choice;\n// //     this.setState({ questions });\n// //   };\n\n// //   handleSubmit = (event) => {\n// //     event.preventDefault();\n// //     const feedback = {\n// //       questions: this.state.questions.map((q) => q.question),\n// //       choices: this.state.questions.map((q) => q.answer),\n// //     };\n// //     console.log(\"Feedback submitted:\", feedback);\n// //     this.setState({ showDialog: true }); // Show the dialog upon form submission\n// //     // Here you can also post the feedback to a backend endpoint if required\n// //   };\n\n// //   handleCloseDialog = () => {\n// //     // Close the dialog\n// //     this.setState({ showDialog: false }, () => {\n// //       // Refresh the page after the dialog is closed\n// //       window.location.reload();\n// //     });\n// //   };\n// //   render() {\n// //     return (\n// //       <Container>\n// //         <Grid container spacing={3}>\n// //           <Grid item xs={12}>\n// //             <img\n// //               src={this.state.companyLogo}\n// //               alt=\"Company Logo\"\n// //               style={{ width: \"150px\", marginBottom: \"20px\" }}\n// //             />\n// //             <Typography variant=\"h4\">\n// //               Feedback for {this.state.unitName}\n// //             </Typography>\n// //           </Grid>\n// //         </Grid>\n\n// //         <form onSubmit={this.handleSubmit}>\n// //           <Table>\n// //             <TableBody>\n// //               {this.state.questions.map((question, index) => (\n// //                 <TableRow key={index}>\n// //                   <TableCell\n// //                     style={{\n// //                       color: \"rgba(0, 0, 0, 0.87)\",\n// //                       border: \"1px solid\",\n// //                     }}\n// //                   >\n// //                     <FormControl component=\"fieldset\">\n// //                       <FormLabel component=\"legend\">\n// //                         <Typography variant=\"h5\">\n// //                           {question.question}\n// //                         </Typography>\n// //                       </FormLabel>\n// //                     </FormControl>\n// //                   </TableCell>\n// //                   <TableCell\n// //                     style={{\n// //                       color: \"rgba(0, 0, 0, 0.87)\",\n// //                       border: \"1px solid\",\n// //                     }}\n// //                   >\n// //                     <Table>\n// //                       <TableBody>\n// //                         <TableRow>\n// //                           {question.choices.map((choice, choiceIndex) => (\n// //                             <TableCell\n// //                               style={{\n// //                                 color: \"rgba(0, 0, 0, 0.87)\",\n// //                                 border: \"1px solid\",\n// //                               }}\n// //                               key={choiceIndex}\n// //                             >\n// //                               <FormControlLabel\n// //                                 value={choice}\n// //                                 control={<Radio />}\n// //                                 label={<Typography>{choice}</Typography>}\n// //                                 onChange={(event) =>\n// //                                   this.handleChoiceChange(index, choice)\n// //                                 }\n// //                               />\n// //                             </TableCell>\n// //                           ))}\n// //                         </TableRow>\n// //                       </TableBody>\n// //                     </Table>\n// //                   </TableCell>\n// //                 </TableRow>\n// //               ))}\n// //             </TableBody>\n// //           </Table>\n// //           <Button\n// //             style={{ marginTop: \"10px\" }}\n// //             type=\"submit\"\n// //             variant=\"contained\"\n// //             color=\"primary\"\n// //           >\n// //             Submit Feedback\n// //           </Button>\n// //         </form>\n\n// //         <Dialog\n// //           open={this.state.showDialog}\n// //           onClose={this.handleCloseDialog}\n// //           aria-labelledby=\"feedback-dialog-title\"\n// //           aria-describedby=\"feedback-dialog-description\"\n// //         >\n// //           <DialogTitle id=\"feedback-dialog-title\">\n// //             {\"Feedback Submitted Successfully\"}\n// //           </DialogTitle>\n// //           <DialogContent>\n// //             <DialogContentText id=\"feedback-dialog-description\">\n// //               Thank you for your feedback. Here's a summary of your responses:\n// //               <ul>\n// //                 {this.state.questions.map((question, index) => (\n// //                   <li key={index}>\n// //                     <span style={{ color: \"black\" }}>\n// //                       {\" \"}\n// //                       {`${question.question}`}\n// //                     </span>\n// //                     <span style={{ color: \"blue\" }}>\n// //                       {\" \"}\n// //                       {` ${question.answer}`}\n// //                     </span>\n// //                   </li>\n// //                 ))}\n// //               </ul>\n// //             </DialogContentText>\n// //           </DialogContent>\n// //           <Button onClick={this.handleCloseDialog} color=\"primary\">\n// //             Close\n// //           </Button>\n// //         </Dialog>\n// //       </Container>\n// //     );\n// //   }\n// // }\n\n// // export default FeedbackForm;\n\n// import React, { Component } from \"react\";\n// import {\n//   RadioGroup,\n//   FormControlLabel,\n//   FormControl,\n//   FormLabel,\n//   Button,\n//   Typography,\n//   Container,\n//   Table,\n//   TableBody,\n//   TableRow,\n//   TableCell,\n//   Grid,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   DialogContentText,\n//   Radio,\n// } from \"@material-ui/core\";\n\n// class FeedbackForm extends Component {\n//   state = {\n//     questions: [],\n//     choices: [],\n//     feedback: {\n//       questions: [],\n//       choices: [],\n//     },\n//     companyLogo: \"\",\n//     unitName: \"\",\n//     showDialog: false, // State to control dialog visibility\n//   };\n\n//   componentDidMount() {\n//     this.fetchQuestions();\n//   }\n\n//   fetchQuestions = () => {\n//     fetch(\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\n//     )\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Network response was not ok\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         if (data.status === 1) {\n//           const questions = data.feedbackQuestions.map((question, index) => ({\n//             question: question,\n//             choices: data.choices[index],\n//             answer: \"\",\n//           }));\n//           this.setState({\n//             questions,\n//             companyLogo: data.companyLogo,\n//             unitName: data.unitName,\n//           });\n//         } else {\n//           throw new Error(data.error_msg || \"Error fetching questions\");\n//         }\n//       })\n//       .catch((error) =>\n//         console.error(\"There was an error fetching the questions:\", error)\n//       );\n//   };\n\n//   handleChoiceChange = (index, choice) => {\n//     const questions = [...this.state.questions];\n//     questions[index].answer = choice;\n//     this.setState({ questions });\n//   };\n\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n//     const feedback = {\n//       questions: this.state.questions.map((q) => q.question),\n//       choices: this.state.questions.map((q) => q.answer),\n//     };\n//     console.log(\"Feedback submitted:\", feedback);\n//     this.setState({ showDialog: true }); // Show the dialog upon form submission\n//     // Here you can also post the feedback to a backend endpoint if required\n//   };\n\n//   handleCloseDialog = () => {\n//     // Close the dialog\n//     this.setState({ showDialog: false }, () => {\n//       // Refresh the page after the dialog is closed\n//       window.location.reload();\n//     });\n//   };\n//   render() {\n//     return (\n//       <Container>\n//         <Grid container spacing={3}>\n//           <Grid item xs={12}>\n//             <img\n//               src={this.state.companyLogo}\n//               alt=\"Company Logo\"\n//               style={{ width: \"150px\", marginBottom: \"20px\" }}\n//             />\n//             <Typography variant=\"h4\">\n//               Feedback for {this.state.unitName}\n//             </Typography>\n//           </Grid>\n//         </Grid>\n\n//         <form onSubmit={this.handleSubmit}>\n//           <Table>\n//             <TableBody>\n//               {this.state.questions.map((question, index) => (\n//                 <TableRow key={index}>\n//                   <TableCell\n//                     style={{\n//                       color: \"rgba(0, 0, 0, 0.87)\",\n//                       border: \"1px solid\",\n//                     }}\n//                   >\n//                     <Typography variant=\"h5\">{question.question}</Typography>\n//                   </TableCell>\n//                   <TableCell\n//                     style={{\n//                       color: \"rgba(0, 0, 0, 0.87)\",\n//                       border: \"1px solid\",\n//                     }}\n//                   >\n//                     <FormControl component=\"fieldset\">\n//                       <RadioGroup\n//                         value={question.answer}\n//                         onChange={(event) =>\n//                           this.handleChoiceChange(index, event.target.value)\n//                         }\n//                       >\n//                         {question.choices.map((choice, choiceIndex) => (\n//                           <FormControlLabel\n//                             key={choiceIndex}\n//                             value={choice}\n//                             control={<Radio />}\n//                             label={<Typography>{choice}</Typography>}\n//                           />\n//                         ))}\n//                       </RadioGroup>\n//                     </FormControl>\n//                   </TableCell>\n//                 </TableRow>\n//               ))}\n//             </TableBody>\n//           </Table>\n//           <Button\n//             style={{ marginTop: \"10px\" }}\n//             type=\"submit\"\n//             variant=\"contained\"\n//             color=\"primary\"\n//           >\n//             Submit Feedback\n//           </Button>\n//         </form>\n\n//         <Dialog\n//           open={this.state.showDialog}\n//           onClose={this.handleCloseDialog}\n//           aria-labelledby=\"feedback-dialog-title\"\n//           aria-describedby=\"feedback-dialog-description\"\n//         >\n//           <DialogTitle id=\"feedback-dialog-title\">\n//             {\"Feedback Submitted Successfully\"}\n//           </DialogTitle>\n//           <DialogContent>\n//             <DialogContentText id=\"feedback-dialog-description\">\n//               Thank you for your feedback. Here's a summary of your responses:\n//               <ul>\n//                 {this.state.questions.map((question, index) => (\n//                   <li key={index}>\n//                     <span style={{ color: \"black\" }}>\n//                       {\" \"}\n//                       {`${question.question}`}\n//                     </span>\n//                     <span style={{ color: \"blue\" }}>\n//                       {\" \"}\n//                       {` ${question.answer}`}\n//                     </span>\n//                   </li>\n//                 ))}\n//               </ul>\n//             </DialogContentText>\n//           </DialogContent>\n//           <Button onClick={this.handleCloseDialog} color=\"primary\">\n//             Close\n//           </Button>\n//         </Dialog>\n//       </Container>\n//     );\n//   }\n// }\n\n// export default FeedbackForm;\n\nimport React, { Component } from \"react\";\nimport { RadioGroup, FormControlLabel, FormControl, Button, Typography, Container, Table, TableBody, TableRow, TableCell, Grid, Dialog, DialogTitle, DialogContent, DialogContentText, Radio // Import Radio as well\n} from \"@material-ui/core\";\nclass FeedbackForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [],\n      companyLogo: \"\",\n      unitName: \"\",\n      showDialog: false // State to control dialog visibility\n    };\n    this.fetchQuestions = () => {\n      fetch(\"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\").then(response => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      }).then(data => {\n        if (data.status === 1) {\n          const questions = data.feedbackQuestions.map((question, index) => ({\n            question: question,\n            choices: data.choices[index],\n            answer: \"\"\n          }));\n          this.setState({\n            questions,\n            companyLogo: data.companyLogo,\n            unitName: data.unitName\n          });\n        } else {\n          throw new Error(data.error_msg || \"Error fetching questions\");\n        }\n      }).catch(error => console.error(\"There was an error fetching the questions:\", error));\n    };\n    this.handleChoiceChange = (index, choice) => {\n      const questions = [...this.state.questions];\n      questions[index].answer = choice;\n      this.setState({\n        questions\n      });\n    };\n    this.handleSubmit = event => {\n      event.preventDefault();\n      console.log(\"Feedback submitted:\", this.state.questions);\n      this.setState({\n        showDialog: true\n      }); // Show the dialog upon form submission\n      // Here you can also post the feedback to a backend endpoint if required\n    };\n    this.handleCloseDialog = () => {\n      // Close the dialog\n      this.setState({\n        showDialog: false\n      }, () => {\n        // Refresh the page after the dialog is closed\n        window.location.reload();\n      });\n    };\n  }\n  componentDidMount() {\n    this.fetchQuestions();\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.companyLogo,\n      alt: \"Company Logo\",\n      style: {\n        width: \"150px\",\n        marginBottom: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 13\n      }\n    }, \"Feedback for \", this.state.unitName))), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 13\n      }\n    }, this.state.questions.map((question, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      style: {\n        color: \"rgba(0, 0, 0, 0.87)\",\n        border: \"1px solid\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 21\n      }\n    }, question.question)), /*#__PURE__*/React.createElement(TableCell, {\n      style: {\n        color: \"rgba(0, 0, 0, 0.87)\",\n        border: \"1px solid\",\n        display: \"flex\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      component: \"fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(RadioGroup, {\n      value: question.answer,\n      onChange: event => this.handleChoiceChange(index, event.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 23\n      }\n    }, question.choices.map((choice, choiceIndex) => /*#__PURE__*/React.createElement(FormControlLabel, {\n      key: choiceIndex,\n      value: choice,\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 38\n        }\n      }),\n      label: /*#__PURE__*/React.createElement(Typography, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 36\n        }\n      }, choice),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 27\n      }\n    }))))))))), /*#__PURE__*/React.createElement(Button, {\n      style: {\n        marginTop: \"10px\"\n      },\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 11\n      }\n    }, \"Submit Feedback\")), /*#__PURE__*/React.createElement(Dialog, {\n      open: this.state.showDialog,\n      onClose: this.handleCloseDialog,\n      \"aria-labelledby\": \"feedback-dialog-title\",\n      \"aria-describedby\": \"feedback-dialog-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"feedback-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 11\n      }\n    }, \"Feedback Submitted Successfully\"), /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DialogContentText, {\n      id: \"feedback-dialog-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 13\n      }\n    }, \"Thank you for your feedback. Here's a summary of your responses:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 575,\n        columnNumber: 15\n      }\n    }, this.state.questions.map((question, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"black\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 21\n      }\n    }, \" \", `${question.question}`), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        color: \"blue\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 21\n      }\n    }, \" \", ` ${question.answer}`)))))), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleCloseDialog,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 11\n      }\n    }, \"Close\")));\n  }\n}\nexport default FeedbackForm;","map":{"version":3,"names":["React","Component","RadioGroup","FormControlLabel","FormControl","Button","Typography","Container","Table","TableBody","TableRow","TableCell","Grid","Dialog","DialogTitle","DialogContent","DialogContentText","Radio","FeedbackForm","constructor","args","state","questions","companyLogo","unitName","showDialog","fetchQuestions","fetch","then","response","ok","Error","json","data","status","feedbackQuestions","map","question","index","choices","answer","setState","error_msg","catch","error","console","handleChoiceChange","choice","handleSubmit","event","preventDefault","log","handleCloseDialog","window","location","reload","componentDidMount","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","item","xs","src","alt","style","width","marginBottom","variant","onSubmit","key","color","border","display","component","value","onChange","target","choiceIndex","control","label","marginTop","type","open","onClose","id","onClick"],"sources":["C:/Users/anil kumar/Desktop/techbrj/dynamic-feedback-form/src/FeedbackForm.js"],"sourcesContent":["// // import React, { Component } from \"react\";\r\n// // import {\r\n// //   Radio,\r\n// //   FormControlLabel,\r\n// //   FormControl,\r\n// //   FormLabel,\r\n// //   Button,\r\n// //   Typography,\r\n// //   Container,\r\n// //   Table,\r\n// //   TableBody,\r\n// //   TableRow,\r\n// //   TableCell,\r\n// //   Grid,\r\n// //   Dialog,\r\n// //   DialogTitle,\r\n// //   DialogContent,\r\n// //   DialogContentText,\r\n// // } from \"@material-ui/core\";\r\n\r\n// // class FeedbackForm extends Component {\r\n// //   state = {\r\n// //     questions: [],\r\n// //     choices: [],\r\n// //     feedback: {\r\n// //       questions: [],\r\n// //       choices: [],\r\n// //     },\r\n// //     companyLogo: \"\",\r\n// //     unitName: \"\",\r\n// //     showDialog: false, // State to control dialog visibility\r\n// //   };\r\n\r\n// //   componentDidMount() {\r\n// //     this.fetchQuestions();\r\n// //   }\r\n\r\n// //   fetchQuestions = () => {\r\n// //     fetch(\r\n// //       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n// //     )\r\n// //       .then((response) => {\r\n// //         if (!response.ok) {\r\n// //           throw new Error(\"Network response was not ok\");\r\n// //         }\r\n// //         return response.json();\r\n// //       })\r\n// //       .then((data) => {\r\n// //         if (data.status === 1) {\r\n// //           const questions = data.feedbackQuestions.map((question, index) => ({\r\n// //             question: question,\r\n// //             choices: data.choices[index],\r\n// //             answer: \"\",\r\n// //           }));\r\n// //           this.setState({\r\n// //             questions,\r\n// //             companyLogo: data.companyLogo,\r\n// //             unitName: data.unitName,\r\n// //           });\r\n// //         } else {\r\n// //           throw new Error(data.error_msg || \"Error fetching questions\");\r\n// //         }\r\n// //       })\r\n// //       .catch((error) =>\r\n// //         console.error(\"There was an error fetching the questions:\", error)\r\n// //       );\r\n// //   };\r\n\r\n// //   handleChoiceChange = (index, choice) => {\r\n// //     const questions = [...this.state.questions];\r\n// //     questions[index].answer = choice;\r\n// //     this.setState({ questions });\r\n// //   };\r\n\r\n// //   handleSubmit = (event) => {\r\n// //     event.preventDefault();\r\n// //     const feedback = {\r\n// //       questions: this.state.questions.map((q) => q.question),\r\n// //       choices: this.state.questions.map((q) => q.answer),\r\n// //     };\r\n// //     console.log(\"Feedback submitted:\", feedback);\r\n// //     this.setState({ showDialog: true }); // Show the dialog upon form submission\r\n// //     // Here you can also post the feedback to a backend endpoint if required\r\n// //   };\r\n\r\n// //   handleCloseDialog = () => {\r\n// //     // Close the dialog\r\n// //     this.setState({ showDialog: false }, () => {\r\n// //       // Refresh the page after the dialog is closed\r\n// //       window.location.reload();\r\n// //     });\r\n// //   };\r\n// //   render() {\r\n// //     return (\r\n// //       <Container>\r\n// //         <Grid container spacing={3}>\r\n// //           <Grid item xs={12}>\r\n// //             <img\r\n// //               src={this.state.companyLogo}\r\n// //               alt=\"Company Logo\"\r\n// //               style={{ width: \"150px\", marginBottom: \"20px\" }}\r\n// //             />\r\n// //             <Typography variant=\"h4\">\r\n// //               Feedback for {this.state.unitName}\r\n// //             </Typography>\r\n// //           </Grid>\r\n// //         </Grid>\r\n\r\n// //         <form onSubmit={this.handleSubmit}>\r\n// //           <Table>\r\n// //             <TableBody>\r\n// //               {this.state.questions.map((question, index) => (\r\n// //                 <TableRow key={index}>\r\n// //                   <TableCell\r\n// //                     style={{\r\n// //                       color: \"rgba(0, 0, 0, 0.87)\",\r\n// //                       border: \"1px solid\",\r\n// //                     }}\r\n// //                   >\r\n// //                     <FormControl component=\"fieldset\">\r\n// //                       <FormLabel component=\"legend\">\r\n// //                         <Typography variant=\"h5\">\r\n// //                           {question.question}\r\n// //                         </Typography>\r\n// //                       </FormLabel>\r\n// //                     </FormControl>\r\n// //                   </TableCell>\r\n// //                   <TableCell\r\n// //                     style={{\r\n// //                       color: \"rgba(0, 0, 0, 0.87)\",\r\n// //                       border: \"1px solid\",\r\n// //                     }}\r\n// //                   >\r\n// //                     <Table>\r\n// //                       <TableBody>\r\n// //                         <TableRow>\r\n// //                           {question.choices.map((choice, choiceIndex) => (\r\n// //                             <TableCell\r\n// //                               style={{\r\n// //                                 color: \"rgba(0, 0, 0, 0.87)\",\r\n// //                                 border: \"1px solid\",\r\n// //                               }}\r\n// //                               key={choiceIndex}\r\n// //                             >\r\n// //                               <FormControlLabel\r\n// //                                 value={choice}\r\n// //                                 control={<Radio />}\r\n// //                                 label={<Typography>{choice}</Typography>}\r\n// //                                 onChange={(event) =>\r\n// //                                   this.handleChoiceChange(index, choice)\r\n// //                                 }\r\n// //                               />\r\n// //                             </TableCell>\r\n// //                           ))}\r\n// //                         </TableRow>\r\n// //                       </TableBody>\r\n// //                     </Table>\r\n// //                   </TableCell>\r\n// //                 </TableRow>\r\n// //               ))}\r\n// //             </TableBody>\r\n// //           </Table>\r\n// //           <Button\r\n// //             style={{ marginTop: \"10px\" }}\r\n// //             type=\"submit\"\r\n// //             variant=\"contained\"\r\n// //             color=\"primary\"\r\n// //           >\r\n// //             Submit Feedback\r\n// //           </Button>\r\n// //         </form>\r\n\r\n// //         <Dialog\r\n// //           open={this.state.showDialog}\r\n// //           onClose={this.handleCloseDialog}\r\n// //           aria-labelledby=\"feedback-dialog-title\"\r\n// //           aria-describedby=\"feedback-dialog-description\"\r\n// //         >\r\n// //           <DialogTitle id=\"feedback-dialog-title\">\r\n// //             {\"Feedback Submitted Successfully\"}\r\n// //           </DialogTitle>\r\n// //           <DialogContent>\r\n// //             <DialogContentText id=\"feedback-dialog-description\">\r\n// //               Thank you for your feedback. Here's a summary of your responses:\r\n// //               <ul>\r\n// //                 {this.state.questions.map((question, index) => (\r\n// //                   <li key={index}>\r\n// //                     <span style={{ color: \"black\" }}>\r\n// //                       {\" \"}\r\n// //                       {`${question.question}`}\r\n// //                     </span>\r\n// //                     <span style={{ color: \"blue\" }}>\r\n// //                       {\" \"}\r\n// //                       {` ${question.answer}`}\r\n// //                     </span>\r\n// //                   </li>\r\n// //                 ))}\r\n// //               </ul>\r\n// //             </DialogContentText>\r\n// //           </DialogContent>\r\n// //           <Button onClick={this.handleCloseDialog} color=\"primary\">\r\n// //             Close\r\n// //           </Button>\r\n// //         </Dialog>\r\n// //       </Container>\r\n// //     );\r\n// //   }\r\n// // }\r\n\r\n// // export default FeedbackForm;\r\n\r\n// import React, { Component } from \"react\";\r\n// import {\r\n//   RadioGroup,\r\n//   FormControlLabel,\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Button,\r\n//   Typography,\r\n//   Container,\r\n//   Table,\r\n//   TableBody,\r\n//   TableRow,\r\n//   TableCell,\r\n//   Grid,\r\n//   Dialog,\r\n//   DialogTitle,\r\n//   DialogContent,\r\n//   DialogContentText,\r\n//   Radio,\r\n// } from \"@material-ui/core\";\r\n\r\n// class FeedbackForm extends Component {\r\n//   state = {\r\n//     questions: [],\r\n//     choices: [],\r\n//     feedback: {\r\n//       questions: [],\r\n//       choices: [],\r\n//     },\r\n//     companyLogo: \"\",\r\n//     unitName: \"\",\r\n//     showDialog: false, // State to control dialog visibility\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     this.fetchQuestions();\r\n//   }\r\n\r\n//   fetchQuestions = () => {\r\n//     fetch(\r\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n//     )\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Network response was not ok\");\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         if (data.status === 1) {\r\n//           const questions = data.feedbackQuestions.map((question, index) => ({\r\n//             question: question,\r\n//             choices: data.choices[index],\r\n//             answer: \"\",\r\n//           }));\r\n//           this.setState({\r\n//             questions,\r\n//             companyLogo: data.companyLogo,\r\n//             unitName: data.unitName,\r\n//           });\r\n//         } else {\r\n//           throw new Error(data.error_msg || \"Error fetching questions\");\r\n//         }\r\n//       })\r\n//       .catch((error) =>\r\n//         console.error(\"There was an error fetching the questions:\", error)\r\n//       );\r\n//   };\r\n\r\n//   handleChoiceChange = (index, choice) => {\r\n//     const questions = [...this.state.questions];\r\n//     questions[index].answer = choice;\r\n//     this.setState({ questions });\r\n//   };\r\n\r\n//   handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n//     const feedback = {\r\n//       questions: this.state.questions.map((q) => q.question),\r\n//       choices: this.state.questions.map((q) => q.answer),\r\n//     };\r\n//     console.log(\"Feedback submitted:\", feedback);\r\n//     this.setState({ showDialog: true }); // Show the dialog upon form submission\r\n//     // Here you can also post the feedback to a backend endpoint if required\r\n//   };\r\n\r\n//   handleCloseDialog = () => {\r\n//     // Close the dialog\r\n//     this.setState({ showDialog: false }, () => {\r\n//       // Refresh the page after the dialog is closed\r\n//       window.location.reload();\r\n//     });\r\n//   };\r\n//   render() {\r\n//     return (\r\n//       <Container>\r\n//         <Grid container spacing={3}>\r\n//           <Grid item xs={12}>\r\n//             <img\r\n//               src={this.state.companyLogo}\r\n//               alt=\"Company Logo\"\r\n//               style={{ width: \"150px\", marginBottom: \"20px\" }}\r\n//             />\r\n//             <Typography variant=\"h4\">\r\n//               Feedback for {this.state.unitName}\r\n//             </Typography>\r\n//           </Grid>\r\n//         </Grid>\r\n\r\n//         <form onSubmit={this.handleSubmit}>\r\n//           <Table>\r\n//             <TableBody>\r\n//               {this.state.questions.map((question, index) => (\r\n//                 <TableRow key={index}>\r\n//                   <TableCell\r\n//                     style={{\r\n//                       color: \"rgba(0, 0, 0, 0.87)\",\r\n//                       border: \"1px solid\",\r\n//                     }}\r\n//                   >\r\n//                     <Typography variant=\"h5\">{question.question}</Typography>\r\n//                   </TableCell>\r\n//                   <TableCell\r\n//                     style={{\r\n//                       color: \"rgba(0, 0, 0, 0.87)\",\r\n//                       border: \"1px solid\",\r\n//                     }}\r\n//                   >\r\n//                     <FormControl component=\"fieldset\">\r\n//                       <RadioGroup\r\n//                         value={question.answer}\r\n//                         onChange={(event) =>\r\n//                           this.handleChoiceChange(index, event.target.value)\r\n//                         }\r\n//                       >\r\n//                         {question.choices.map((choice, choiceIndex) => (\r\n//                           <FormControlLabel\r\n//                             key={choiceIndex}\r\n//                             value={choice}\r\n//                             control={<Radio />}\r\n//                             label={<Typography>{choice}</Typography>}\r\n//                           />\r\n//                         ))}\r\n//                       </RadioGroup>\r\n//                     </FormControl>\r\n//                   </TableCell>\r\n//                 </TableRow>\r\n//               ))}\r\n//             </TableBody>\r\n//           </Table>\r\n//           <Button\r\n//             style={{ marginTop: \"10px\" }}\r\n//             type=\"submit\"\r\n//             variant=\"contained\"\r\n//             color=\"primary\"\r\n//           >\r\n//             Submit Feedback\r\n//           </Button>\r\n//         </form>\r\n\r\n//         <Dialog\r\n//           open={this.state.showDialog}\r\n//           onClose={this.handleCloseDialog}\r\n//           aria-labelledby=\"feedback-dialog-title\"\r\n//           aria-describedby=\"feedback-dialog-description\"\r\n//         >\r\n//           <DialogTitle id=\"feedback-dialog-title\">\r\n//             {\"Feedback Submitted Successfully\"}\r\n//           </DialogTitle>\r\n//           <DialogContent>\r\n//             <DialogContentText id=\"feedback-dialog-description\">\r\n//               Thank you for your feedback. Here's a summary of your responses:\r\n//               <ul>\r\n//                 {this.state.questions.map((question, index) => (\r\n//                   <li key={index}>\r\n//                     <span style={{ color: \"black\" }}>\r\n//                       {\" \"}\r\n//                       {`${question.question}`}\r\n//                     </span>\r\n//                     <span style={{ color: \"blue\" }}>\r\n//                       {\" \"}\r\n//                       {` ${question.answer}`}\r\n//                     </span>\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//             </DialogContentText>\r\n//           </DialogContent>\r\n//           <Button onClick={this.handleCloseDialog} color=\"primary\">\r\n//             Close\r\n//           </Button>\r\n//         </Dialog>\r\n//       </Container>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default FeedbackForm;\r\n\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  Button,\r\n  Typography,\r\n  Container,\r\n  Table,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Grid,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  Radio, // Import Radio as well\r\n} from \"@material-ui/core\";\r\n\r\nclass FeedbackForm extends Component {\r\n  state = {\r\n    questions: [],\r\n    companyLogo: \"\",\r\n    unitName: \"\",\r\n    showDialog: false, // State to control dialog visibility\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchQuestions();\r\n  }\r\n\r\n  fetchQuestions = () => {\r\n    fetch(\r\n      \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response was not ok\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.status === 1) {\r\n          const questions = data.feedbackQuestions.map((question, index) => ({\r\n            question: question,\r\n            choices: data.choices[index],\r\n            answer: \"\",\r\n          }));\r\n          this.setState({\r\n            questions,\r\n            companyLogo: data.companyLogo,\r\n            unitName: data.unitName,\r\n          });\r\n        } else {\r\n          throw new Error(data.error_msg || \"Error fetching questions\");\r\n        }\r\n      })\r\n      .catch((error) =>\r\n        console.error(\"There was an error fetching the questions:\", error)\r\n      );\r\n  };\r\n\r\n  handleChoiceChange = (index, choice) => {\r\n    const questions = [...this.state.questions];\r\n    questions[index].answer = choice;\r\n    this.setState({ questions });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    console.log(\"Feedback submitted:\", this.state.questions);\r\n    this.setState({ showDialog: true }); // Show the dialog upon form submission\r\n    // Here you can also post the feedback to a backend endpoint if required\r\n  };\r\n\r\n  handleCloseDialog = () => {\r\n    // Close the dialog\r\n    this.setState({ showDialog: false }, () => {\r\n      // Refresh the page after the dialog is closed\r\n      window.location.reload();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <img\r\n              src={this.state.companyLogo}\r\n              alt=\"Company Logo\"\r\n              style={{ width: \"150px\", marginBottom: \"20px\" }}\r\n            />\r\n            <Typography variant=\"h4\">\r\n              Feedback for {this.state.unitName}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <form onSubmit={this.handleSubmit}>\r\n          <Table>\r\n            <TableBody>\r\n              {this.state.questions.map((question, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell\r\n                    style={{\r\n                      color: \"rgba(0, 0, 0, 0.87)\",\r\n                      border: \"1px solid\",\r\n                    }}\r\n                  >\r\n                    <Typography variant=\"h5\">{question.question}</Typography>\r\n                  </TableCell>\r\n                  <TableCell\r\n                    style={{\r\n                      color: \"rgba(0, 0, 0, 0.87)\",\r\n                      border: \"1px solid\",\r\n                      display: \"flex\",\r\n                    }}\r\n                  >\r\n                    <FormControl component=\"fieldset\">\r\n                      <RadioGroup\r\n                        value={question.answer}\r\n                        onChange={(event) =>\r\n                          this.handleChoiceChange(index, event.target.value)\r\n                        }\r\n                      >\r\n                        {question.choices.map((choice, choiceIndex) => (\r\n                          <FormControlLabel\r\n                            key={choiceIndex}\r\n                            value={choice}\r\n                            control={<Radio />}\r\n                            label={<Typography>{choice}</Typography>}\r\n                          />\r\n                        ))}\r\n                      </RadioGroup>\r\n                    </FormControl>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          <Button\r\n            style={{ marginTop: \"10px\" }}\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n          >\r\n            Submit Feedback\r\n          </Button>\r\n        </form>\r\n\r\n        <Dialog\r\n          open={this.state.showDialog}\r\n          onClose={this.handleCloseDialog}\r\n          aria-labelledby=\"feedback-dialog-title\"\r\n          aria-describedby=\"feedback-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"feedback-dialog-title\">\r\n            {\"Feedback Submitted Successfully\"}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"feedback-dialog-description\">\r\n              Thank you for your feedback. Here's a summary of your responses:\r\n              <ul>\r\n                {this.state.questions.map((question, index) => (\r\n                  <li key={index}>\r\n                    <span style={{ color: \"black\" }}>\r\n                      {\" \"}\r\n                      {`${question.question}`}\r\n                    </span>\r\n                    <span style={{ color: \"blue\" }}>\r\n                      {\" \"}\r\n                      {` ${question.answer}`}\r\n                    </span>\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <Button onClick={this.handleCloseDialog} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </Dialog>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedbackForm;\r\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SACEC,UAAU,EACVC,gBAAgB,EAChBC,WAAW,EACXC,MAAM,EACNC,UAAU,EACVC,SAAS,EACTC,KAAK,EACLC,SAAS,EACTC,QAAQ,EACRC,SAAS,EACTC,IAAI,EACJC,MAAM,EACNC,WAAW,EACXC,aAAa,EACbC,iBAAiB,EACjBC,KAAK,CAAE;AAAA,OACF,mBAAmB;AAE1B,MAAMC,YAAY,SAASjB,SAAS,CAAC;EAAAkB,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACnCC,KAAK,GAAG;MACNC,SAAS,EAAE,EAAE;MACbC,WAAW,EAAE,EAAE;MACfC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,KAAK,CAA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}