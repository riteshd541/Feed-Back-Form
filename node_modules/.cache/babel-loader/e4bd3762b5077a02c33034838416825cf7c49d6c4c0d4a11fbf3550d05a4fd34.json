{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anil kumar\\\\Desktop\\\\techbrj\\\\dynamic-feedback-form\\\\src\\\\FeedbackForm.js\";\n// // // import React, { Component } from \"react\";\n// // // import {\n// // //   Radio,\n// // //   RadioGroup,\n// // //   FormControlLabel,\n// // //   FormControl,\n// // //   FormLabel,\n// // //   Button,\n// // // } from \"@material-ui/core\";\n\n// // // class FeedbackForm extends Component {\n// // //   state = {\n// // //     questions: [],\n// // //     choices: [],\n// // //     feedback: {\n// // //       questions: [],\n// // //       choices: [],\n// // //     },\n// // //     companyLogo: \"\",\n// // //     unitName: \"\",\n// // //   };\n\n// // //   componentDidMount() {\n// // //     this.fetchQuestions();\n// // //   }\n\n// // //   fetchQuestions = () => {\n// // //     fetch(\n// // //       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\n// // //     )\n// // //       .then((response) => {\n// // //         if (!response.ok) {\n// // //           throw new Error(\"Network response was not ok\");\n// // //         }\n// // //         return response.json();\n// // //       })\n// // //       .then((data) => {\n// // //         if (data.status === 1) {\n// // //           const questions = data.feedbackQuestions.map((question, index) => ({\n// // //             question: question,\n// // //             choices: data.choices[index],\n// // //             answer: \"\",\n// // //           }));\n// // //           this.setState({\n// // //             questions,\n// // //             companyLogo: data.companyLogo,\n// // //             unitName: data.unitName,\n// // //           });\n// // //         } else {\n// // //           throw new Error(data.error_msg || \"Error fetching questions\");\n// // //         }\n// // //       })\n// // //       .catch((error) =>\n// // //         console.error(\"There was an error fetching the questions:\", error)\n// // //       );\n// // //   };\n\n// // //   handleChoiceChange = (index, choice) => {\n// // //     const questions = [...this.state.questions];\n// // //     questions[index].answer = choice;\n// // //     this.setState({ questions });\n// // //   };\n\n// // //   handleSubmit = (event) => {\n// // //     event.preventDefault();\n// // //     const feedback = {\n// // //       questions: this.state.questions.map((q) => q.question),\n// // //       choices: this.state.questions.map((q) => q.answer),\n// // //     };\n// // //     console.log(\"Feedback submitted:\", feedback);\n// // //     // Here you can also post the feedback to a backend endpoint if required\n// // //   };\n\n// // //   renderQuestion = (question, index) => (\n// // //     <FormControl component=\"fieldset\" key={index}>\n// // //       <FormLabel component=\"legend\">{question.question}</FormLabel>\n// // //       <RadioGroup\n// // //         aria-label={question.question}\n// // //         name={question.question}\n// // //         value={question.answer}\n// // //         onChange={(event) => this.handleChoiceChange(index, event.target.value)}\n// // //       >\n// // //         {question.choices.map((choice, choiceIndex) => (\n// // //           <FormControlLabel\n// // //             key={choiceIndex}\n// // //             value={choice}\n// // //             control={<Radio />}\n// // //             label={choice}\n// // //           />\n// // //         ))}\n// // //       </RadioGroup>\n// // //     </FormControl>\n// // //   );\n\n// // //   render() {\n// // //     return (\n// // //       <div>\n// // //         <img src={this.state.companyLogo} alt=\"Company Logo\" />\n// // //         <h2>Feedback for {this.state.unitName}</h2>\n// // //         <form onSubmit={this.handleSubmit}>\n// // //           {this.state.questions.map(this.renderQuestion)}\n// // //           <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n// // //             Submit Feedback\n// // //           </Button>\n// // //         </form>\n// // //       </div>\n// // //     );\n// // //   }\n// // // }\n\n// // // export default FeedbackForm;\n\n// // import React, { Component } from \"react\";\n// // import {\n// //   Radio,\n// //   RadioGroup,\n// //   FormControlLabel,\n// //   FormControl,\n// //   FormLabel,\n// //   Button,\n// //   Typography,\n// //   Container,\n// //   Grid,\n// //   Paper,\n// // } from \"@material-ui/core\";\n\n// // class FeedbackForm extends Component {\n// //   state = {\n// //     questions: [],\n// //     choices: [],\n// //     feedback: {\n// //       questions: [],\n// //       choices: [],\n// //     },\n// //     companyLogo: \"\",\n// //     unitName: \"\",\n// //   };\n\n// //   componentDidMount() {\n// //     this.fetchQuestions();\n// //   }\n\n// //   fetchQuestions = () => {\n// //     fetch(\n// //       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\n// //     )\n// //       .then((response) => {\n// //         if (!response.ok) {\n// //           throw new Error(\"Network response was not ok\");\n// //         }\n// //         return response.json();\n// //       })\n// //       .then((data) => {\n// //         if (data.status === 1) {\n// //           const questions = data.feedbackQuestions.map((question, index) => ({\n// //             question: question,\n// //             choices: data.choices[index],\n// //             answer: \"\",\n// //           }));\n// //           this.setState({\n// //             questions,\n// //             companyLogo: data.companyLogo,\n// //             unitName: data.unitName,\n// //           });\n// //         } else {\n// //           throw new Error(data.error_msg || \"Error fetching questions\");\n// //         }\n// //       })\n// //       .catch((error) =>\n// //         console.error(\"There was an error fetching the questions:\", error)\n// //       );\n// //   };\n\n// //   handleChoiceChange = (index, choice) => {\n// //     const questions = [...this.state.questions];\n// //     questions[index].answer = choice;\n// //     this.setState({ questions });\n// //   };\n\n// //   handleSubmit = (event) => {\n// //     event.preventDefault();\n// //     const feedback = {\n// //       questions: this.state.questions.map((q) => q.question),\n// //       choices: this.state.questions.map((q) => q.answer),\n// //     };\n// //     console.log(\"Feedback submitted:\", feedback);\n// //     // Here you can also post the feedback to a backend endpoint if required\n// //   };\n\n// //   render() {\n// //     return (\n// //       <Container>\n// //         <Grid container spacing={3}>\n// //           <Grid item xs={12}>\n// //             <img\n// //               src={this.state.companyLogo}\n// //               alt=\"Company Logo\"\n// //               style={{ width: \"150px\", marginBottom: \"20px\" }}\n// //             />\n// //             <Typography variant=\"h4\">\n// //               Feedback for {this.state.unitName}\n// //             </Typography>\n// //           </Grid>\n// //           <Grid item xs={12}>\n// //             <form onSubmit={this.handleSubmit}>\n// //               <Grid container spacing={3}>\n// //                 {this.state.questions.map((question, index) => (\n// //                   <React.Fragment key={index}>\n// //                     <Grid item xs={12} sm={6}>\n// //                       <Paper elevation={3} style={{ padding: \"20px\" }}>\n// //                         <FormControl component=\"fieldset\">\n// //                           <FormLabel component=\"legend\">\n// //                             <Typography variant=\"h6\">\n// //                               {question.question}\n// //                             </Typography>\n// //                           </FormLabel>\n// //                         </FormControl>\n// //                       </Paper>\n// //                     </Grid>\n// //                     <Grid item xs={12} sm={6}>\n// //                       <Paper elevation={3} style={{ padding: \"20px\" }}>\n// //                         <FormControl component=\"fieldset\">\n// //                           <RadioGroup\n// //                             aria-label={question.question}\n// //                             name={question.question}\n// //                             value={question.answer}\n// //                             onChange={(event) =>\n// //                               this.handleChoiceChange(index, event.target.value)\n// //                             }\n// //                           >\n// //                             {question.choices.map((choice, choiceIndex) => (\n// //                               <FormControlLabel\n// //                                 key={choiceIndex}\n// //                                 value={choice}\n// //                                 control={<Radio />}\n// //                                 label={<Typography>{choice}</Typography>}\n// //                               />\n// //                             ))}\n// //                           </RadioGroup>\n// //                         </FormControl>\n// //                       </Paper>\n// //                     </Grid>\n// //                   </React.Fragment>\n// //                 ))}\n// //               </Grid>\n// //               <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n// //                 Submit Feedback\n// //               </Button>\n// //             </form>\n// //           </Grid>\n// //         </Grid>\n// //       </Container>\n// //     );\n// //   }\n// // }\n\n// // export default FeedbackForm;\n\n// import React, { Component } from \"react\";\n// import {\n//   Radio,\n//   RadioGroup,\n//   FormControlLabel,\n//   FormControl,\n//   FormLabel,\n//   Button,\n//   Typography,\n//   Container,\n//   Table,\n//   TableBody,\n//   TableRow,\n//   TableCell,\n// } from \"@material-ui/core\";\n\n// class FeedbackForm extends Component {\n//   state = {\n//     questions: [],\n//     choices: [],\n//     feedback: {\n//       questions: [],\n//       choices: [],\n//     },\n//     companyLogo: \"\",\n//     unitName: \"\",\n//   };\n\n//   componentDidMount() {\n//     this.fetchQuestions();\n//   }\n\n//   fetchQuestions = () => {\n//     fetch(\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\n//     )\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Network response was not ok\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         if (data.status === 1) {\n//           const questions = data.feedbackQuestions.map((question, index) => ({\n//             question: question,\n//             choices: data.choices[index],\n//             answer: \"\",\n//           }));\n//           this.setState({\n//             questions,\n//             companyLogo: data.companyLogo,\n//             unitName: data.unitName,\n//           });\n//         } else {\n//           throw new Error(data.error_msg || \"Error fetching questions\");\n//         }\n//       })\n//       .catch((error) =>\n//         console.error(\"There was an error fetching the questions:\", error)\n//       );\n//   };\n\n//   handleChoiceChange = (index, choice) => {\n//     const questions = [...this.state.questions];\n//     questions[index].answer = choice;\n//     this.setState({ questions });\n//   };\n\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n//     const feedback = {\n//       questions: this.state.questions.map((q) => q.question),\n//       choices: this.state.questions.map((q) => q.answer),\n//     };\n//     console.log(\"Feedback submitted:\", feedback);\n//     // Here you can also post the feedback to a backend endpoint if required\n//   };\n\n//   render() {\n//     return (\n//       <Container>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Feedback for {this.state.unitName}\n//         </Typography>\n//         <form onSubmit={this.handleSubmit}>\n//           <Table>\n//             <TableBody>\n//               {this.state.questions.map((question, index) => (\n//                 <TableRow key={index}>\n//                   <TableCell>\n//                     <FormControl component=\"fieldset\">\n//                       <FormLabel component=\"legend\">\n//                         <Typography variant=\"body1\">\n//                           {question.question}\n//                         </Typography>\n//                       </FormLabel>\n//                     </FormControl>\n//                   </TableCell>\n//                   <TableCell>\n//                     <FormControl component=\"fieldset\">\n//                       <RadioGroup\n//                         aria-label={question.question}\n//                         name={question.question}\n//                         value={question.answer}\n//                         onChange={(event) =>\n//                           this.handleChoiceChange(index, event.target.value)\n//                         }\n//                       >\n//                         {question.choices.map((choice, choiceIndex) => (\n//                           <FormControlLabel\n//                             key={choiceIndex}\n//                             value={choice}\n//                             control={<Radio />}\n//                             label={<Typography>{choice}</Typography>}\n//                           />\n//                         ))}\n//                       </RadioGroup>\n//                     </FormControl>\n//                   </TableCell>\n//                 </TableRow>\n//               ))}\n//             </TableBody>\n//           </Table>\n//           <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n//             Submit Feedback\n//           </Button>\n//         </form>\n//       </Container>\n//     );\n//   }\n// }\n\n// export default FeedbackForm;\n\nimport React, { Component } from \"react\";\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Button, Typography, Container, Table, TableBody, TableRow, TableCell, Grid } from \"@material-ui/core\";\nclass FeedbackForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [],\n      choices: [],\n      feedback: {\n        questions: [],\n        choices: []\n      },\n      companyLogo: \"\",\n      unitName: \"\"\n    };\n    this.fetchQuestions = () => {\n      fetch(\"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\").then(response => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      }).then(data => {\n        if (data.status === 1) {\n          const questions = data.feedbackQuestions.map((question, index) => ({\n            question: question,\n            choices: data.choices[index],\n            answer: \"\"\n          }));\n          this.setState({\n            questions,\n            companyLogo: data.companyLogo,\n            unitName: data.unitName\n          });\n        } else {\n          throw new Error(data.error_msg || \"Error fetching questions\");\n        }\n      }).catch(error => console.error(\"There was an error fetching the questions:\", error));\n    };\n    this.handleChoiceChange = (index, choice) => {\n      const questions = [...this.state.questions];\n      questions[index].answer = choice;\n      this.setState({\n        questions\n      });\n    };\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const feedback = {\n        questions: this.state.questions.map(q => q.question),\n        choices: this.state.questions.map(q => q.answer)\n      };\n      console.log(\"Feedback submitted:\", feedback);\n      // Here you can also post the feedback to a backend endpoint if required\n    };\n  }\n  componentDidMount() {\n    this.fetchQuestions();\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.companyLogo,\n      alt: \"Company Logo\",\n      style: {\n        width: \"150px\",\n        marginBottom: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 13\n      }\n    }, \"Feedback for \", this.state.unitName))), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 13\n      }\n    }, this.state.questions.map((question, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      component: \"fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      component: \"legend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 25\n      }\n    }, question.question)))), /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(TableRow, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 25\n      }\n    }, question.choices.map((choice, choiceIndex) => /*#__PURE__*/React.createElement(TableCell, {\n      key: choiceIndex,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: choice,\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 42\n        }\n      }),\n      label: /*#__PURE__*/React.createElement(Typography, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 40\n        }\n      }, choice),\n      onChange: event => this.handleChoiceChange(index, choice),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 31\n      }\n    }))))))))))), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 11\n      }\n    }, \"Submit Feedback\")));\n  }\n}\nexport default FeedbackForm;","map":{"version":3,"names":["React","Component","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","Button","Typography","Container","Table","TableBody","TableRow","TableCell","Grid","FeedbackForm","constructor","args","state","questions","choices","feedback","companyLogo","unitName","fetchQuestions","fetch","then","response","ok","Error","json","data","status","feedbackQuestions","map","question","index","answer","setState","error_msg","catch","error","console","handleChoiceChange","choice","handleSubmit","event","preventDefault","q","log","componentDidMount","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","item","xs","src","alt","style","width","marginBottom","variant","onSubmit","key","component","choiceIndex","value","control","label","onChange","type","color"],"sources":["C:/Users/anil kumar/Desktop/techbrj/dynamic-feedback-form/src/FeedbackForm.js"],"sourcesContent":["// // // import React, { Component } from \"react\";\r\n// // // import {\r\n// // //   Radio,\r\n// // //   RadioGroup,\r\n// // //   FormControlLabel,\r\n// // //   FormControl,\r\n// // //   FormLabel,\r\n// // //   Button,\r\n// // // } from \"@material-ui/core\";\r\n\r\n// // // class FeedbackForm extends Component {\r\n// // //   state = {\r\n// // //     questions: [],\r\n// // //     choices: [],\r\n// // //     feedback: {\r\n// // //       questions: [],\r\n// // //       choices: [],\r\n// // //     },\r\n// // //     companyLogo: \"\",\r\n// // //     unitName: \"\",\r\n// // //   };\r\n\r\n// // //   componentDidMount() {\r\n// // //     this.fetchQuestions();\r\n// // //   }\r\n\r\n// // //   fetchQuestions = () => {\r\n// // //     fetch(\r\n// // //       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n// // //     )\r\n// // //       .then((response) => {\r\n// // //         if (!response.ok) {\r\n// // //           throw new Error(\"Network response was not ok\");\r\n// // //         }\r\n// // //         return response.json();\r\n// // //       })\r\n// // //       .then((data) => {\r\n// // //         if (data.status === 1) {\r\n// // //           const questions = data.feedbackQuestions.map((question, index) => ({\r\n// // //             question: question,\r\n// // //             choices: data.choices[index],\r\n// // //             answer: \"\",\r\n// // //           }));\r\n// // //           this.setState({\r\n// // //             questions,\r\n// // //             companyLogo: data.companyLogo,\r\n// // //             unitName: data.unitName,\r\n// // //           });\r\n// // //         } else {\r\n// // //           throw new Error(data.error_msg || \"Error fetching questions\");\r\n// // //         }\r\n// // //       })\r\n// // //       .catch((error) =>\r\n// // //         console.error(\"There was an error fetching the questions:\", error)\r\n// // //       );\r\n// // //   };\r\n\r\n// // //   handleChoiceChange = (index, choice) => {\r\n// // //     const questions = [...this.state.questions];\r\n// // //     questions[index].answer = choice;\r\n// // //     this.setState({ questions });\r\n// // //   };\r\n\r\n// // //   handleSubmit = (event) => {\r\n// // //     event.preventDefault();\r\n// // //     const feedback = {\r\n// // //       questions: this.state.questions.map((q) => q.question),\r\n// // //       choices: this.state.questions.map((q) => q.answer),\r\n// // //     };\r\n// // //     console.log(\"Feedback submitted:\", feedback);\r\n// // //     // Here you can also post the feedback to a backend endpoint if required\r\n// // //   };\r\n\r\n// // //   renderQuestion = (question, index) => (\r\n// // //     <FormControl component=\"fieldset\" key={index}>\r\n// // //       <FormLabel component=\"legend\">{question.question}</FormLabel>\r\n// // //       <RadioGroup\r\n// // //         aria-label={question.question}\r\n// // //         name={question.question}\r\n// // //         value={question.answer}\r\n// // //         onChange={(event) => this.handleChoiceChange(index, event.target.value)}\r\n// // //       >\r\n// // //         {question.choices.map((choice, choiceIndex) => (\r\n// // //           <FormControlLabel\r\n// // //             key={choiceIndex}\r\n// // //             value={choice}\r\n// // //             control={<Radio />}\r\n// // //             label={choice}\r\n// // //           />\r\n// // //         ))}\r\n// // //       </RadioGroup>\r\n// // //     </FormControl>\r\n// // //   );\r\n\r\n// // //   render() {\r\n// // //     return (\r\n// // //       <div>\r\n// // //         <img src={this.state.companyLogo} alt=\"Company Logo\" />\r\n// // //         <h2>Feedback for {this.state.unitName}</h2>\r\n// // //         <form onSubmit={this.handleSubmit}>\r\n// // //           {this.state.questions.map(this.renderQuestion)}\r\n// // //           <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n// // //             Submit Feedback\r\n// // //           </Button>\r\n// // //         </form>\r\n// // //       </div>\r\n// // //     );\r\n// // //   }\r\n// // // }\r\n\r\n// // // export default FeedbackForm;\r\n\r\n// // import React, { Component } from \"react\";\r\n// // import {\r\n// //   Radio,\r\n// //   RadioGroup,\r\n// //   FormControlLabel,\r\n// //   FormControl,\r\n// //   FormLabel,\r\n// //   Button,\r\n// //   Typography,\r\n// //   Container,\r\n// //   Grid,\r\n// //   Paper,\r\n// // } from \"@material-ui/core\";\r\n\r\n// // class FeedbackForm extends Component {\r\n// //   state = {\r\n// //     questions: [],\r\n// //     choices: [],\r\n// //     feedback: {\r\n// //       questions: [],\r\n// //       choices: [],\r\n// //     },\r\n// //     companyLogo: \"\",\r\n// //     unitName: \"\",\r\n// //   };\r\n\r\n// //   componentDidMount() {\r\n// //     this.fetchQuestions();\r\n// //   }\r\n\r\n// //   fetchQuestions = () => {\r\n// //     fetch(\r\n// //       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n// //     )\r\n// //       .then((response) => {\r\n// //         if (!response.ok) {\r\n// //           throw new Error(\"Network response was not ok\");\r\n// //         }\r\n// //         return response.json();\r\n// //       })\r\n// //       .then((data) => {\r\n// //         if (data.status === 1) {\r\n// //           const questions = data.feedbackQuestions.map((question, index) => ({\r\n// //             question: question,\r\n// //             choices: data.choices[index],\r\n// //             answer: \"\",\r\n// //           }));\r\n// //           this.setState({\r\n// //             questions,\r\n// //             companyLogo: data.companyLogo,\r\n// //             unitName: data.unitName,\r\n// //           });\r\n// //         } else {\r\n// //           throw new Error(data.error_msg || \"Error fetching questions\");\r\n// //         }\r\n// //       })\r\n// //       .catch((error) =>\r\n// //         console.error(\"There was an error fetching the questions:\", error)\r\n// //       );\r\n// //   };\r\n\r\n// //   handleChoiceChange = (index, choice) => {\r\n// //     const questions = [...this.state.questions];\r\n// //     questions[index].answer = choice;\r\n// //     this.setState({ questions });\r\n// //   };\r\n\r\n// //   handleSubmit = (event) => {\r\n// //     event.preventDefault();\r\n// //     const feedback = {\r\n// //       questions: this.state.questions.map((q) => q.question),\r\n// //       choices: this.state.questions.map((q) => q.answer),\r\n// //     };\r\n// //     console.log(\"Feedback submitted:\", feedback);\r\n// //     // Here you can also post the feedback to a backend endpoint if required\r\n// //   };\r\n\r\n// //   render() {\r\n// //     return (\r\n// //       <Container>\r\n// //         <Grid container spacing={3}>\r\n// //           <Grid item xs={12}>\r\n// //             <img\r\n// //               src={this.state.companyLogo}\r\n// //               alt=\"Company Logo\"\r\n// //               style={{ width: \"150px\", marginBottom: \"20px\" }}\r\n// //             />\r\n// //             <Typography variant=\"h4\">\r\n// //               Feedback for {this.state.unitName}\r\n// //             </Typography>\r\n// //           </Grid>\r\n// //           <Grid item xs={12}>\r\n// //             <form onSubmit={this.handleSubmit}>\r\n// //               <Grid container spacing={3}>\r\n// //                 {this.state.questions.map((question, index) => (\r\n// //                   <React.Fragment key={index}>\r\n// //                     <Grid item xs={12} sm={6}>\r\n// //                       <Paper elevation={3} style={{ padding: \"20px\" }}>\r\n// //                         <FormControl component=\"fieldset\">\r\n// //                           <FormLabel component=\"legend\">\r\n// //                             <Typography variant=\"h6\">\r\n// //                               {question.question}\r\n// //                             </Typography>\r\n// //                           </FormLabel>\r\n// //                         </FormControl>\r\n// //                       </Paper>\r\n// //                     </Grid>\r\n// //                     <Grid item xs={12} sm={6}>\r\n// //                       <Paper elevation={3} style={{ padding: \"20px\" }}>\r\n// //                         <FormControl component=\"fieldset\">\r\n// //                           <RadioGroup\r\n// //                             aria-label={question.question}\r\n// //                             name={question.question}\r\n// //                             value={question.answer}\r\n// //                             onChange={(event) =>\r\n// //                               this.handleChoiceChange(index, event.target.value)\r\n// //                             }\r\n// //                           >\r\n// //                             {question.choices.map((choice, choiceIndex) => (\r\n// //                               <FormControlLabel\r\n// //                                 key={choiceIndex}\r\n// //                                 value={choice}\r\n// //                                 control={<Radio />}\r\n// //                                 label={<Typography>{choice}</Typography>}\r\n// //                               />\r\n// //                             ))}\r\n// //                           </RadioGroup>\r\n// //                         </FormControl>\r\n// //                       </Paper>\r\n// //                     </Grid>\r\n// //                   </React.Fragment>\r\n// //                 ))}\r\n// //               </Grid>\r\n// //               <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n// //                 Submit Feedback\r\n// //               </Button>\r\n// //             </form>\r\n// //           </Grid>\r\n// //         </Grid>\r\n// //       </Container>\r\n// //     );\r\n// //   }\r\n// // }\r\n\r\n// // export default FeedbackForm;\r\n\r\n// import React, { Component } from \"react\";\r\n// import {\r\n//   Radio,\r\n//   RadioGroup,\r\n//   FormControlLabel,\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Button,\r\n//   Typography,\r\n//   Container,\r\n//   Table,\r\n//   TableBody,\r\n//   TableRow,\r\n//   TableCell,\r\n// } from \"@material-ui/core\";\r\n\r\n// class FeedbackForm extends Component {\r\n//   state = {\r\n//     questions: [],\r\n//     choices: [],\r\n//     feedback: {\r\n//       questions: [],\r\n//       choices: [],\r\n//     },\r\n//     companyLogo: \"\",\r\n//     unitName: \"\",\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     this.fetchQuestions();\r\n//   }\r\n\r\n//   fetchQuestions = () => {\r\n//     fetch(\r\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n//     )\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Network response was not ok\");\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         if (data.status === 1) {\r\n//           const questions = data.feedbackQuestions.map((question, index) => ({\r\n//             question: question,\r\n//             choices: data.choices[index],\r\n//             answer: \"\",\r\n//           }));\r\n//           this.setState({\r\n//             questions,\r\n//             companyLogo: data.companyLogo,\r\n//             unitName: data.unitName,\r\n//           });\r\n//         } else {\r\n//           throw new Error(data.error_msg || \"Error fetching questions\");\r\n//         }\r\n//       })\r\n//       .catch((error) =>\r\n//         console.error(\"There was an error fetching the questions:\", error)\r\n//       );\r\n//   };\r\n\r\n//   handleChoiceChange = (index, choice) => {\r\n//     const questions = [...this.state.questions];\r\n//     questions[index].answer = choice;\r\n//     this.setState({ questions });\r\n//   };\r\n\r\n//   handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n//     const feedback = {\r\n//       questions: this.state.questions.map((q) => q.question),\r\n//       choices: this.state.questions.map((q) => q.answer),\r\n//     };\r\n//     console.log(\"Feedback submitted:\", feedback);\r\n//     // Here you can also post the feedback to a backend endpoint if required\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <Container>\r\n//         <Typography variant=\"h4\" gutterBottom>\r\n//           Feedback for {this.state.unitName}\r\n//         </Typography>\r\n//         <form onSubmit={this.handleSubmit}>\r\n//           <Table>\r\n//             <TableBody>\r\n//               {this.state.questions.map((question, index) => (\r\n//                 <TableRow key={index}>\r\n//                   <TableCell>\r\n//                     <FormControl component=\"fieldset\">\r\n//                       <FormLabel component=\"legend\">\r\n//                         <Typography variant=\"body1\">\r\n//                           {question.question}\r\n//                         </Typography>\r\n//                       </FormLabel>\r\n//                     </FormControl>\r\n//                   </TableCell>\r\n//                   <TableCell>\r\n//                     <FormControl component=\"fieldset\">\r\n//                       <RadioGroup\r\n//                         aria-label={question.question}\r\n//                         name={question.question}\r\n//                         value={question.answer}\r\n//                         onChange={(event) =>\r\n//                           this.handleChoiceChange(index, event.target.value)\r\n//                         }\r\n//                       >\r\n//                         {question.choices.map((choice, choiceIndex) => (\r\n//                           <FormControlLabel\r\n//                             key={choiceIndex}\r\n//                             value={choice}\r\n//                             control={<Radio />}\r\n//                             label={<Typography>{choice}</Typography>}\r\n//                           />\r\n//                         ))}\r\n//                       </RadioGroup>\r\n//                     </FormControl>\r\n//                   </TableCell>\r\n//                 </TableRow>\r\n//               ))}\r\n//             </TableBody>\r\n//           </Table>\r\n//           <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n//             Submit Feedback\r\n//           </Button>\r\n//         </form>\r\n//       </Container>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default FeedbackForm;\r\n\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n  Button,\r\n  Typography,\r\n  Container,\r\n  Table,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\n\r\nclass FeedbackForm extends Component {\r\n  state = {\r\n    questions: [],\r\n    choices: [],\r\n    feedback: {\r\n      questions: [],\r\n      choices: [],\r\n    },\r\n    companyLogo: \"\",\r\n    unitName: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchQuestions();\r\n  }\r\n\r\n  fetchQuestions = () => {\r\n    fetch(\r\n      \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response was not ok\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.status === 1) {\r\n          const questions = data.feedbackQuestions.map((question, index) => ({\r\n            question: question,\r\n            choices: data.choices[index],\r\n            answer: \"\",\r\n          }));\r\n          this.setState({\r\n            questions,\r\n            companyLogo: data.companyLogo,\r\n            unitName: data.unitName,\r\n          });\r\n        } else {\r\n          throw new Error(data.error_msg || \"Error fetching questions\");\r\n        }\r\n      })\r\n      .catch((error) =>\r\n        console.error(\"There was an error fetching the questions:\", error)\r\n      );\r\n  };\r\n\r\n  handleChoiceChange = (index, choice) => {\r\n    const questions = [...this.state.questions];\r\n    questions[index].answer = choice;\r\n    this.setState({ questions });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const feedback = {\r\n      questions: this.state.questions.map((q) => q.question),\r\n      choices: this.state.questions.map((q) => q.answer),\r\n    };\r\n    console.log(\"Feedback submitted:\", feedback);\r\n    // Here you can also post the feedback to a backend endpoint if required\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <img\r\n              src={this.state.companyLogo}\r\n              alt=\"Company Logo\"\r\n              style={{ width: \"150px\", marginBottom: \"20px\" }}\r\n            />\r\n            <Typography variant=\"h4\">\r\n              Feedback for {this.state.unitName}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <form onSubmit={this.handleSubmit}>\r\n          <Table>\r\n            <TableBody>\r\n              {this.state.questions.map((question, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell>\r\n                    <FormControl component=\"fieldset\">\r\n                      <FormLabel component=\"legend\">\r\n                        <Typography variant=\"body1\">\r\n                          {question.question}\r\n                        </Typography>\r\n                      </FormLabel>\r\n                    </FormControl>\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Table>\r\n                      <TableBody>\r\n                        <TableRow>\r\n                          {question.choices.map((choice, choiceIndex) => (\r\n                            <TableCell key={choiceIndex}>\r\n                              <FormControlLabel\r\n                                value={choice}\r\n                                control={<Radio />}\r\n                                label={<Typography>{choice}</Typography>}\r\n                                onChange={(event) =>\r\n                                  this.handleChoiceChange(index, choice)\r\n                                }\r\n                              />\r\n                            </TableCell>\r\n                          ))}\r\n                        </TableRow>\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n            Submit Feedback\r\n          </Button>\r\n        </form>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedbackForm;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}