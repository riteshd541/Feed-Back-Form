{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anil kumar\\\\Desktop\\\\techbrj\\\\dynamic-feedback-form\\\\src\\\\FeedbackForm.js\";\n// // FeedbackForm.js\n\nimport React, { Component } from \"react\";\nimport { FormControl, RadioGroup, FormControlLabel, Radio, Button } from \"@material-ui/core\";\nimport \"./FeedbackForm.css\";\nclass FeedbackForm extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = (index, choice) => {\n      this.setState(prevState => {\n        const updatedChoices = [...prevState.choices];\n        updatedChoices[index] = choice;\n        const updatedSelectedOptions = [...prevState.selectedOptions];\n        updatedSelectedOptions[index] = choice;\n        return {\n          choices: updatedChoices,\n          selectedOptions: updatedSelectedOptions\n        };\n      });\n    };\n    this.state = {\n      questions: [],\n      choices: [],\n      // Update choices to be an array of arrays\n      selectedOptions: [] // Add selectedOptions to keep track of selected options\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\").then(response => response.json()).then(data => {\n      if (data && data.feedbackQuestions && data.choices) {\n        // Process data and set state\n        this.setState({\n          questions: data.feedbackQuestions,\n          choices: data.choices.map(() => \"\"),\n          // Initialize choices array with empty strings\n          selectedOptions: data.choices.map(() => \"\") // Initialize selectedOptions array with empty strings\n        });\n      } else {\n        console.error(\"Error fetching data: Questions or choices data not found\");\n      }\n    }).catch(error => console.error(\"Error fetching data:\", error));\n  }\n  render() {\n    const {\n      questions,\n      choices,\n      selectedOptions\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, \"Feedback form\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, questions.map((question, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-container\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      className: \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }\n    }, question), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"radio-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      component: \"fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(RadioGroup, {\n      value: selectedOptions[index] // Use selectedOptions to keep track of selected value\n      ,\n      onChange: e => this.handleChange(index, e.target.value),\n      className: \"radio-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 19\n      }\n    }, Array.isArray(choices[index]) && choices[index].map((choice, choiceIndex) => /*#__PURE__*/React.createElement(FormControlLabel, {\n      key: choiceIndex,\n      value: choice,\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 36\n        }\n      }) // Remove checked prop\n      ,\n      label: choice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }))))))), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, \"Submit\")));\n  }\n}\nexport default FeedbackForm;\n\n// class FeedbackForm extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       questions: [],\n//       choices: [],\n//     };\n//   }\n\n//   componentDidMount() {\n//     fetch(\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\n//     )\n//       .then((response) => response.json())\n//       .then((data) => {\n//         if (data && data.feedbackQuestions && data.choices) {\n//           // Process data and set state\n//           this.setState({\n//             questions: data.feedbackQuestions,\n//             choices: data.choices, // Set choices directly from API response\n//           });\n//         } else {\n//           console.error(\n//             \"Error fetching data: Questions or choices data not found\"\n//           );\n//         }\n//       })\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }\n//   /*\n//   handleChange = (index, choice) => {\n//     this.setState((prevState) => {\n//       const updatedChoices = [...prevState.choices];\n//       updatedChoices[index] = choice;\n//       return { choices: updatedChoices };\n//     });\n//   };\n// */\n//   handleChange = (index, choice) => {\n//     this.setState((prevState) => {\n//       const updatedChoices = [...prevState.choices];\n//       // Ensure choices[index] is an array before updating\n//       if (!Array.isArray(updatedChoices[index])) {\n//         updatedChoices[index] = [];\n//       }\n//       // Update the choices for the specific index\n//       updatedChoices[index] = [choice];\n//       return { choices: updatedChoices };\n//     });\n//   };\n\n//   handleSubmit = (e) => {\n//     e.preventDefault(); // Prevent form submission\n\n//     const { questions, choices } = this.state;\n\n//     // Check if any question has not been answered\n//     if (choices.length !== questions.length || choices.includes(\"\")) {\n//       alert(\"Please answer all questions before submitting.\");\n//       return; // Exit early if any question is not answered\n//     } else {\n//       alert(\"Form submitted successfully\");\n//     }\n\n//     // Construct feedback object\n//     const feedback = { feedback: { questions, choices } };\n\n//     // Perform submission logic\n//     console.log(feedback); // You can replace this with actual submission logic\n//   };\n//   render() {\n//     const { questions, choices } = this.state;\n\n//     return (\n//       <div className=\"container\">\n//         <h1>Feedback form</h1>\n//         <form onSubmit={this.handleSubmit}>\n//           {questions.map((question, index) => (\n//             <div className=\"question-container\" key={index}>\n//               <p className=\"question-text\">{question}</p>\n//               <div className=\"radio-options\">\n//                 <FormControl component=\"fieldset\">\n//                   <RadioGroup\n//                     value={choices[index]}\n//                     onChange={(e) => this.handleChange(index, e.target.value)}\n//                     className=\"radio-options\"\n//                   >\n//                     {/* Check if choices[index] is an array before mapping */}\n//                     {Array.isArray(choices[index]) &&\n//                       choices[index].map((choice, choiceIndex) => (\n//                         <FormControlLabel\n//                           key={choiceIndex}\n//                           value={choice}\n//                           control={\n//                             <Radio />\n//                           }\n//                           label={choice}\n//                         />\n//                       ))}\n//                   </RadioGroup>\n//                 </FormControl>\n//               </div>\n//             </div>\n//           ))}\n//           <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n//             Submit\n//           </Button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// export default FeedbackForm;","map":{"version":3,"names":["React","Component","FormControl","RadioGroup","FormControlLabel","Radio","Button","FeedbackForm","constructor","props","handleChange","index","choice","setState","prevState","updatedChoices","choices","updatedSelectedOptions","selectedOptions","state","questions","componentDidMount","fetch","then","response","json","data","feedbackQuestions","map","console","error","catch","render","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","handleSubmit","question","key","component","value","onChange","e","target","Array","isArray","choiceIndex","control","label","type","variant","color"],"sources":["C:/Users/anil kumar/Desktop/techbrj/dynamic-feedback-form/src/FeedbackForm.js"],"sourcesContent":["// // FeedbackForm.js\r\n\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  FormControl,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  Radio,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport \"./FeedbackForm.css\";\r\n\r\nclass FeedbackForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questions: [],\r\n      choices: [], // Update choices to be an array of arrays\r\n      selectedOptions: [], // Add selectedOptions to keep track of selected options\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data && data.feedbackQuestions && data.choices) {\r\n          // Process data and set state\r\n          this.setState({\r\n            questions: data.feedbackQuestions,\r\n            choices: data.choices.map(() => \"\"), // Initialize choices array with empty strings\r\n            selectedOptions: data.choices.map(() => \"\"), // Initialize selectedOptions array with empty strings\r\n          });\r\n        } else {\r\n          console.error(\r\n            \"Error fetching data: Questions or choices data not found\"\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => console.error(\"Error fetching data:\", error));\r\n  }\r\n\r\n  handleChange = (index, choice) => {\r\n    this.setState((prevState) => {\r\n      const updatedChoices = [...prevState.choices];\r\n      updatedChoices[index] = choice;\r\n\r\n      const updatedSelectedOptions = [...prevState.selectedOptions];\r\n      updatedSelectedOptions[index] = choice;\r\n\r\n      return {\r\n        choices: updatedChoices,\r\n        selectedOptions: updatedSelectedOptions,\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { questions, choices, selectedOptions } = this.state;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Feedback form</h1>\r\n        <form onSubmit={this.handleSubmit}>\r\n          {questions.map((question, index) => (\r\n            <div className=\"question-container\" key={index}>\r\n              <p className=\"question-text\">{question}</p>\r\n              <div className=\"radio-options\">\r\n                <FormControl component=\"fieldset\">\r\n                  <RadioGroup\r\n                    value={selectedOptions[index]} // Use selectedOptions to keep track of selected value\r\n                    onChange={(e) => this.handleChange(index, e.target.value)}\r\n                    className=\"radio-options\"\r\n                  >\r\n                    {/* Render all options for the current question */}\r\n                    {Array.isArray(choices[index]) &&\r\n                      choices[index].map((choice, choiceIndex) => (\r\n                        <FormControlLabel\r\n                          key={choiceIndex}\r\n                          value={choice}\r\n                          control={<Radio />} // Remove checked prop\r\n                          label={choice}\r\n                        />\r\n                      ))}\r\n                  </RadioGroup>\r\n                </FormControl>\r\n              </div>\r\n            </div>\r\n          ))}\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n            Submit\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedbackForm;\r\n\r\n// class FeedbackForm extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       questions: [],\r\n//       choices: [],\r\n//     };\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     fetch(\r\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n//     )\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         if (data && data.feedbackQuestions && data.choices) {\r\n//           // Process data and set state\r\n//           this.setState({\r\n//             questions: data.feedbackQuestions,\r\n//             choices: data.choices, // Set choices directly from API response\r\n//           });\r\n//         } else {\r\n//           console.error(\r\n//             \"Error fetching data: Questions or choices data not found\"\r\n//           );\r\n//         }\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   }\r\n//   /*\r\n//   handleChange = (index, choice) => {\r\n//     this.setState((prevState) => {\r\n//       const updatedChoices = [...prevState.choices];\r\n//       updatedChoices[index] = choice;\r\n//       return { choices: updatedChoices };\r\n//     });\r\n//   };\r\n// */\r\n//   handleChange = (index, choice) => {\r\n//     this.setState((prevState) => {\r\n//       const updatedChoices = [...prevState.choices];\r\n//       // Ensure choices[index] is an array before updating\r\n//       if (!Array.isArray(updatedChoices[index])) {\r\n//         updatedChoices[index] = [];\r\n//       }\r\n//       // Update the choices for the specific index\r\n//       updatedChoices[index] = [choice];\r\n//       return { choices: updatedChoices };\r\n//     });\r\n//   };\r\n\r\n//   handleSubmit = (e) => {\r\n//     e.preventDefault(); // Prevent form submission\r\n\r\n//     const { questions, choices } = this.state;\r\n\r\n//     // Check if any question has not been answered\r\n//     if (choices.length !== questions.length || choices.includes(\"\")) {\r\n//       alert(\"Please answer all questions before submitting.\");\r\n//       return; // Exit early if any question is not answered\r\n//     } else {\r\n//       alert(\"Form submitted successfully\");\r\n//     }\r\n\r\n//     // Construct feedback object\r\n//     const feedback = { feedback: { questions, choices } };\r\n\r\n//     // Perform submission logic\r\n//     console.log(feedback); // You can replace this with actual submission logic\r\n//   };\r\n//   render() {\r\n//     const { questions, choices } = this.state;\r\n\r\n//     return (\r\n//       <div className=\"container\">\r\n//         <h1>Feedback form</h1>\r\n//         <form onSubmit={this.handleSubmit}>\r\n//           {questions.map((question, index) => (\r\n//             <div className=\"question-container\" key={index}>\r\n//               <p className=\"question-text\">{question}</p>\r\n//               <div className=\"radio-options\">\r\n//                 <FormControl component=\"fieldset\">\r\n//                   <RadioGroup\r\n//                     value={choices[index]}\r\n//                     onChange={(e) => this.handleChange(index, e.target.value)}\r\n//                     className=\"radio-options\"\r\n//                   >\r\n//                     {/* Check if choices[index] is an array before mapping */}\r\n//                     {Array.isArray(choices[index]) &&\r\n//                       choices[index].map((choice, choiceIndex) => (\r\n//                         <FormControlLabel\r\n//                           key={choiceIndex}\r\n//                           value={choice}\r\n//                           control={\r\n//                             <Radio />\r\n//                           }\r\n//                           label={choice}\r\n//                         />\r\n//                       ))}\r\n//                   </RadioGroup>\r\n//                 </FormControl>\r\n//               </div>\r\n//             </div>\r\n//           ))}\r\n//           <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n//             Submit\r\n//           </Button>\r\n//         </form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default FeedbackForm;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}