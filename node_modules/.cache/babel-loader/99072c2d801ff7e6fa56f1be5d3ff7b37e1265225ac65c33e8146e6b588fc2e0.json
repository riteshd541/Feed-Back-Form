{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anil kumar\\\\Desktop\\\\techbrj\\\\dynamic-feedback-form\\\\src\\\\FeedbackForm.js\";\n// import React, { Component } from \"react\";\n// import {\n//   Radio,\n//   RadioGroup,\n//   FormControlLabel,\n//   FormControl,\n//   FormLabel,\n//   Button,\n//   Typography,\n//   Container,\n//   Table,\n//   TableBody,\n//   TableRow,\n//   TableCell,\n//   Grid,\n// } from \"@material-ui/core\";\n\n// class FeedbackForm extends Component {\n//   state = {\n//     questions: [],\n//     choices: [],\n//     feedback: {\n//       questions: [],\n//       choices: [],\n//     },\n//     companyLogo: \"\",\n//     unitName: \"\",\n//   };\n\n//   componentDidMount() {\n//     this.fetchQuestions();\n//   }\n\n//   fetchQuestions = () => {\n//     fetch(\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\n//     )\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Network response was not ok\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         if (data.status === 1) {\n//           const questions = data.feedbackQuestions.map((question, index) => ({\n//             question: question,\n//             choices: data.choices[index],\n//             answer: \"\",\n//           }));\n//           this.setState({\n//             questions,\n//             companyLogo: data.companyLogo,\n//             unitName: data.unitName,\n//           });\n//         } else {\n//           throw new Error(data.error_msg || \"Error fetching questions\");\n//         }\n//       })\n//       .catch((error) =>\n//         console.error(\"There was an error fetching the questions:\", error)\n//       );\n//   };\n\n//   handleChoiceChange = (index, choice) => {\n//     const questions = [...this.state.questions];\n//     questions[index].answer = choice;\n//     this.setState({ questions });\n//   };\n\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n//     const feedback = {\n//       questions: this.state.questions.map((q) => q.question),\n//       choices: this.state.questions.map((q) => q.answer),\n//     };\n//     console.log(\"Feedback submitted:\", feedback);\n//     // Here you can also post the feedback to a backend endpoint if required\n//   };\n\n//   render() {\n//     return (\n//       <Container>\n//         <Grid container spacing={3}>\n//           <Grid item xs={12}>\n//             <img\n//               src={this.state.companyLogo}\n//               alt=\"Company Logo\"\n//               style={{ width: \"150px\", marginBottom: \"20px\" }}\n//             />\n//             <Typography variant=\"h4\">\n//               Feedback for {this.state.unitName}\n//             </Typography>\n//           </Grid>\n//         </Grid>\n\n//         <form onSubmit={this.handleSubmit}>\n//           <Table>\n//             <TableBody>\n//               {this.state.questions.map((question, index) => (\n//                 <TableRow key={index}>\n//                   <TableCell>\n//                     <FormControl component=\"fieldset\">\n//                       <FormLabel component=\"legend\">\n//                         <Typography variant=\"body1\">\n//                           {question.question}\n//                         </Typography>\n//                       </FormLabel>\n//                     </FormControl>\n//                   </TableCell>\n//                   <TableCell>\n//                     <Table>\n//                       <TableBody>\n//                         <TableRow>\n//                           {question.choices.map((choice, choiceIndex) => (\n//                             <TableCell key={choiceIndex}>\n//                               <FormControlLabel\n//                                 value={choice}\n//                                 control={<Radio />}\n//                                 label={<Typography>{choice}</Typography>}\n//                                 onChange={(event) =>\n//                                   this.handleChoiceChange(index, choice)\n//                                 }\n//                               />\n//                             </TableCell>\n//                           ))}\n//                         </TableRow>\n//                       </TableBody>\n//                     </Table>\n//                   </TableCell>\n//                 </TableRow>\n//               ))}\n//             </TableBody>\n//           </Table>\n//           <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n//             Submit Feedback\n//           </Button>\n//         </form>\n//       </Container>\n//     );\n//   }\n// }\n\n// export default FeedbackForm;\n\nimport React, { Component } from \"react\";\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Button, Typography, Container, Table, TableBody, TableRow, TableCell, Grid, Dialog, DialogTitle, DialogContent, DialogContentText } from \"@material-ui/core\";\nclass FeedbackForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [],\n      choices: [],\n      feedback: {\n        questions: [],\n        choices: []\n      },\n      companyLogo: \"\",\n      unitName: \"\",\n      showDialog: false // State to control dialog visibility\n    };\n    // Existing methods...\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const feedback = {\n        questions: this.state.questions.map(q => q.question),\n        choices: this.state.questions.map(q => q.answer)\n      };\n      console.log(\"Feedback submitted:\", feedback);\n      this.setState({\n        showDialog: true\n      }); // Show the dialog upon form submission\n      // Here you can also post the feedback to a backend endpoint if required\n    };\n    this.handleCloseDialog = () => {\n      this.setState({\n        showDialog: false\n      }); // Close the dialog\n    };\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Dialog, {\n      open: this.state.showDialog,\n      onClose: this.handleCloseDialog,\n      \"aria-labelledby\": \"feedback-dialog-title\",\n      \"aria-describedby\": \"feedback-dialog-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"feedback-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }\n    }, \"Feedback Submitted Successfully\"), /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DialogContentText, {\n      id: \"feedback-dialog-description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }\n    }, \"Thank you for your feedback. Here's a summary of your responses:\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 15\n      }\n    }, this.state.questions.map((question, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 19\n      }\n    }, `${question.question}: ${question.answer}`))))), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleCloseDialog,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }\n    }, \"Close\")));\n  }\n}\nexport default FeedbackForm;","map":{"version":3,"names":["React","Component","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","Button","Typography","Container","Table","TableBody","TableRow","TableCell","Grid","Dialog","DialogTitle","DialogContent","DialogContentText","FeedbackForm","constructor","args","state","questions","choices","feedback","companyLogo","unitName","showDialog","handleSubmit","event","preventDefault","map","q","question","answer","console","log","setState","handleCloseDialog","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","open","onClose","id","index","key","onClick","color"],"sources":["C:/Users/anil kumar/Desktop/techbrj/dynamic-feedback-form/src/FeedbackForm.js"],"sourcesContent":["// import React, { Component } from \"react\";\r\n// import {\r\n//   Radio,\r\n//   RadioGroup,\r\n//   FormControlLabel,\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Button,\r\n//   Typography,\r\n//   Container,\r\n//   Table,\r\n//   TableBody,\r\n//   TableRow,\r\n//   TableCell,\r\n//   Grid,\r\n// } from \"@material-ui/core\";\r\n\r\n// class FeedbackForm extends Component {\r\n//   state = {\r\n//     questions: [],\r\n//     choices: [],\r\n//     feedback: {\r\n//       questions: [],\r\n//       choices: [],\r\n//     },\r\n//     companyLogo: \"\",\r\n//     unitName: \"\",\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     this.fetchQuestions();\r\n//   }\r\n\r\n//   fetchQuestions = () => {\r\n//     fetch(\r\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n//     )\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Network response was not ok\");\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         if (data.status === 1) {\r\n//           const questions = data.feedbackQuestions.map((question, index) => ({\r\n//             question: question,\r\n//             choices: data.choices[index],\r\n//             answer: \"\",\r\n//           }));\r\n//           this.setState({\r\n//             questions,\r\n//             companyLogo: data.companyLogo,\r\n//             unitName: data.unitName,\r\n//           });\r\n//         } else {\r\n//           throw new Error(data.error_msg || \"Error fetching questions\");\r\n//         }\r\n//       })\r\n//       .catch((error) =>\r\n//         console.error(\"There was an error fetching the questions:\", error)\r\n//       );\r\n//   };\r\n\r\n//   handleChoiceChange = (index, choice) => {\r\n//     const questions = [...this.state.questions];\r\n//     questions[index].answer = choice;\r\n//     this.setState({ questions });\r\n//   };\r\n\r\n//   handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n//     const feedback = {\r\n//       questions: this.state.questions.map((q) => q.question),\r\n//       choices: this.state.questions.map((q) => q.answer),\r\n//     };\r\n//     console.log(\"Feedback submitted:\", feedback);\r\n//     // Here you can also post the feedback to a backend endpoint if required\r\n//   };\r\n\r\n//   render() {\r\n//     return (\r\n//       <Container>\r\n//         <Grid container spacing={3}>\r\n//           <Grid item xs={12}>\r\n//             <img\r\n//               src={this.state.companyLogo}\r\n//               alt=\"Company Logo\"\r\n//               style={{ width: \"150px\", marginBottom: \"20px\" }}\r\n//             />\r\n//             <Typography variant=\"h4\">\r\n//               Feedback for {this.state.unitName}\r\n//             </Typography>\r\n//           </Grid>\r\n//         </Grid>\r\n\r\n//         <form onSubmit={this.handleSubmit}>\r\n//           <Table>\r\n//             <TableBody>\r\n//               {this.state.questions.map((question, index) => (\r\n//                 <TableRow key={index}>\r\n//                   <TableCell>\r\n//                     <FormControl component=\"fieldset\">\r\n//                       <FormLabel component=\"legend\">\r\n//                         <Typography variant=\"body1\">\r\n//                           {question.question}\r\n//                         </Typography>\r\n//                       </FormLabel>\r\n//                     </FormControl>\r\n//                   </TableCell>\r\n//                   <TableCell>\r\n//                     <Table>\r\n//                       <TableBody>\r\n//                         <TableRow>\r\n//                           {question.choices.map((choice, choiceIndex) => (\r\n//                             <TableCell key={choiceIndex}>\r\n//                               <FormControlLabel\r\n//                                 value={choice}\r\n//                                 control={<Radio />}\r\n//                                 label={<Typography>{choice}</Typography>}\r\n//                                 onChange={(event) =>\r\n//                                   this.handleChoiceChange(index, choice)\r\n//                                 }\r\n//                               />\r\n//                             </TableCell>\r\n//                           ))}\r\n//                         </TableRow>\r\n//                       </TableBody>\r\n//                     </Table>\r\n//                   </TableCell>\r\n//                 </TableRow>\r\n//               ))}\r\n//             </TableBody>\r\n//           </Table>\r\n//           <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n//             Submit Feedback\r\n//           </Button>\r\n//         </form>\r\n//       </Container>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default FeedbackForm;\r\n\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n  Button,\r\n  Typography,\r\n  Container,\r\n  Table,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Grid,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n} from \"@material-ui/core\";\r\n\r\nclass FeedbackForm extends Component {\r\n  state = {\r\n    questions: [],\r\n    choices: [],\r\n    feedback: {\r\n      questions: [],\r\n      choices: [],\r\n    },\r\n    companyLogo: \"\",\r\n    unitName: \"\",\r\n    showDialog: false, // State to control dialog visibility\r\n  };\r\n\r\n  // Existing methods...\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const feedback = {\r\n      questions: this.state.questions.map((q) => q.question),\r\n      choices: this.state.questions.map((q) => q.answer),\r\n    };\r\n    console.log(\"Feedback submitted:\", feedback);\r\n    this.setState({ showDialog: true }); // Show the dialog upon form submission\r\n    // Here you can also post the feedback to a backend endpoint if required\r\n  };\r\n\r\n  handleCloseDialog = () => {\r\n    this.setState({ showDialog: false }); // Close the dialog\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        {/* Existing form rendering */}\r\n        <Dialog\r\n          open={this.state.showDialog}\r\n          onClose={this.handleCloseDialog}\r\n          aria-labelledby=\"feedback-dialog-title\"\r\n          aria-describedby=\"feedback-dialog-description\"\r\n        >\r\n          <DialogTitle id=\"feedback-dialog-title\">\r\n            {\"Feedback Submitted Successfully\"}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText id=\"feedback-dialog-description\">\r\n              Thank you for your feedback. Here's a summary of your responses:\r\n              <ul>\r\n                {this.state.questions.map((question, index) => (\r\n                  <li\r\n                    key={index}\r\n                  >{`${question.question}: ${question.answer}`}</li>\r\n                ))}\r\n              </ul>\r\n            </DialogContentText>\r\n          </DialogContent>\r\n          <Button onClick={this.handleCloseDialog} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </Dialog>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedbackForm;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}