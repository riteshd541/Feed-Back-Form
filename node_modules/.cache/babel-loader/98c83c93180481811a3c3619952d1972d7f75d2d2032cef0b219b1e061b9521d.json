{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anil kumar\\\\Desktop\\\\techbrj\\\\dynamic-feedback-form\\\\src\\\\FeedbackForm.js\";\n// // FeedbackForm.js\n\n// import React, { Component } from \"react\";\n// import {\n//   FormControl,\n//   RadioGroup,\n//   FormControlLabel,\n//   Radio,\n//   Button,\n// } from \"@material-ui/core\";\n// import \"./FeedbackForm.css\";\n\n// class FeedbackForm extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       questions: [],\n//       choices: [],\n//     };\n//   }\n\n//   componentDidMount() {\n//     fetch(\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\n//     )\n//       .then((response) => response.json())\n//       .then((data) => {\n//         if (data && data.feedbackQuestions && data.choices) {\n//           // Process data and set state\n//           this.setState({\n//             questions: data.feedbackQuestions,\n//             choices: data.choices, // Set choices directly from API response\n//           });\n//         } else {\n//           console.error(\n//             \"Error fetching data: Questions or choices data not found\"\n//           );\n//         }\n//       })\n//       .catch((error) => console.error(\"Error fetching data:\", error));\n//   }\n//   /*\n//   handleChange = (index, choice) => {\n//     this.setState((prevState) => {\n//       const updatedChoices = [...prevState.choices];\n//       updatedChoices[index] = choice;\n//       return { choices: updatedChoices };\n//     });\n//   };\n// */\n//   handleChange = (index, choice) => {\n//     this.setState((prevState) => {\n//       const updatedChoices = [...prevState.choices];\n//       // Ensure choices[index] is an array before updating\n//       if (!Array.isArray(updatedChoices[index])) {\n//         updatedChoices[index] = [];\n//       }\n//       // Update the choices for the specific index\n//       updatedChoices[index] = [choice];\n//       return { choices: updatedChoices };\n//     });\n//   };\n\n//   handleSubmit = (e) => {\n//     e.preventDefault(); // Prevent form submission\n\n//     const { questions, choices } = this.state;\n\n//     // Check if any question has not been answered\n//     if (choices.length !== questions.length || choices.includes(\"\")) {\n//       alert(\"Please answer all questions before submitting.\");\n//       return; // Exit early if any question is not answered\n//     } else {\n//       alert(\"Form submitted successfully\");\n//     }\n\n//     // Construct feedback object\n//     const feedback = { feedback: { questions, choices } };\n\n//     // Perform submission logic\n//     console.log(feedback); // You can replace this with actual submission logic\n//   };\n//   render() {\n//     const { questions, choices } = this.state;\n\n//     return (\n//       <div className=\"container\">\n//         <h1>Feedback form</h1>\n//         <form onSubmit={this.handleSubmit}>\n//           {questions.map((question, index) => (\n//             <div className=\"question-container\" key={index}>\n//               <p className=\"question-text\">{question}</p>\n//               <div className=\"radio-options\">\n//                 <FormControl component=\"fieldset\">\n//                   <RadioGroup\n//                     value={choices[index]}\n//                     onChange={(e) => this.handleChange(index, e.target.value)}\n//                     className=\"radio-options\"\n//                   >\n//                     {/* Check if choices[index] is an array before mapping */}\n//                     {Array.isArray(choices[index]) &&\n//                       choices[index].map((choice, choiceIndex) => (\n//                         <FormControlLabel\n//                           key={choiceIndex}\n//                           value={choice}\n//                           control={<Radio />}\n//                           label={choice}\n//                         />\n//                       ))}\n//                   </RadioGroup>\n//                 </FormControl>\n//               </div>\n//             </div>\n//           ))}\n//           <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n//             Submit\n//           </Button>\n//         </form>\n//       </div>\n//     );\n//   }\n// }\n\n// export default FeedbackForm;\nimport React, { Component } from \"react\";\nimport { Radio, RadioGroup, FormControlLabel, FormControl, FormLabel, Button } from \"@material-ui/core\";\nclass FeedbackForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [],\n      choices: [],\n      feedback: {\n        questions: [],\n        choices: []\n      },\n      companyLogo: \"\",\n      unitName: \"\"\n    };\n    this.fetchQuestions = () => {\n      fetch(\"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\").then(response => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      }).then(data => {\n        if (data.status === 1) {\n          const questions = data.feedbackQuestions.map((question, index) => ({\n            question: question,\n            choices: data.choices[index],\n            answer: \"\"\n          }));\n          this.setState({\n            questions,\n            companyLogo: data.companyLogo,\n            unitName: data.unitName\n          });\n        } else {\n          throw new Error(data.error_msg || \"Error fetching questions\");\n        }\n      }).catch(error => console.error(\"There was an error fetching the questions:\", error));\n    };\n    this.handleChoiceChange = (index, choice) => {\n      const questions = [...this.state.questions];\n      questions[index].answer = choice;\n      this.setState({\n        questions\n      });\n    };\n    this.handleSubmit = event => {\n      event.preventDefault();\n      const feedback = {\n        questions: this.state.questions.map(q => q.question),\n        choices: this.state.questions.map(q => q.answer)\n      };\n      console.log(\"Feedback submitted:\", feedback);\n      // Here you can also post the feedback to a backend endpoint if required\n    };\n    this.renderQuestion = (question, index) => /*#__PURE__*/React.createElement(FormControl, {\n      component: \"fieldset\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      component: \"legend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 7\n      }\n    }, question.question), /*#__PURE__*/React.createElement(RadioGroup, {\n      \"aria-label\": question.question,\n      name: question.question,\n      value: question.answer,\n      onChange: event => this.handleChoiceChange(index, event.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 7\n      }\n    }, question.choices.map((choice, choiceIndex) => /*#__PURE__*/React.createElement(FormControlLabel, {\n      key: choiceIndex,\n      value: choice,\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 22\n        }\n      }),\n      label: choice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }\n    }))));\n  }\n  componentDidMount() {\n    this.fetchQuestions();\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.companyLogo,\n      alt: \"Company Logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }\n    }, \"Feedback for \", this.state.unitName), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }\n    }, this.state.questions.map(this.renderQuestion), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }\n    }, \"Submit Feedback\")));\n  }\n}\nexport default FeedbackForm;","map":{"version":3,"names":["React","Component","Radio","RadioGroup","FormControlLabel","FormControl","FormLabel","Button","FeedbackForm","constructor","args","state","questions","choices","feedback","companyLogo","unitName","fetchQuestions","fetch","then","response","ok","Error","json","data","status","feedbackQuestions","map","question","index","answer","setState","error_msg","catch","error","console","handleChoiceChange","choice","handleSubmit","event","preventDefault","q","log","renderQuestion","createElement","component","key","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","name","value","onChange","target","choiceIndex","control","label","componentDidMount","render","src","alt","onSubmit","type","variant","color"],"sources":["C:/Users/anil kumar/Desktop/techbrj/dynamic-feedback-form/src/FeedbackForm.js"],"sourcesContent":["// // FeedbackForm.js\r\n\r\n// import React, { Component } from \"react\";\r\n// import {\r\n//   FormControl,\r\n//   RadioGroup,\r\n//   FormControlLabel,\r\n//   Radio,\r\n//   Button,\r\n// } from \"@material-ui/core\";\r\n// import \"./FeedbackForm.css\";\r\n\r\n// class FeedbackForm extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       questions: [],\r\n//       choices: [],\r\n//     };\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     fetch(\r\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n//     )\r\n//       .then((response) => response.json())\r\n//       .then((data) => {\r\n//         if (data && data.feedbackQuestions && data.choices) {\r\n//           // Process data and set state\r\n//           this.setState({\r\n//             questions: data.feedbackQuestions,\r\n//             choices: data.choices, // Set choices directly from API response\r\n//           });\r\n//         } else {\r\n//           console.error(\r\n//             \"Error fetching data: Questions or choices data not found\"\r\n//           );\r\n//         }\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching data:\", error));\r\n//   }\r\n//   /*\r\n//   handleChange = (index, choice) => {\r\n//     this.setState((prevState) => {\r\n//       const updatedChoices = [...prevState.choices];\r\n//       updatedChoices[index] = choice;\r\n//       return { choices: updatedChoices };\r\n//     });\r\n//   };\r\n// */\r\n//   handleChange = (index, choice) => {\r\n//     this.setState((prevState) => {\r\n//       const updatedChoices = [...prevState.choices];\r\n//       // Ensure choices[index] is an array before updating\r\n//       if (!Array.isArray(updatedChoices[index])) {\r\n//         updatedChoices[index] = [];\r\n//       }\r\n//       // Update the choices for the specific index\r\n//       updatedChoices[index] = [choice];\r\n//       return { choices: updatedChoices };\r\n//     });\r\n//   };\r\n\r\n//   handleSubmit = (e) => {\r\n//     e.preventDefault(); // Prevent form submission\r\n\r\n//     const { questions, choices } = this.state;\r\n\r\n//     // Check if any question has not been answered\r\n//     if (choices.length !== questions.length || choices.includes(\"\")) {\r\n//       alert(\"Please answer all questions before submitting.\");\r\n//       return; // Exit early if any question is not answered\r\n//     } else {\r\n//       alert(\"Form submitted successfully\");\r\n//     }\r\n\r\n//     // Construct feedback object\r\n//     const feedback = { feedback: { questions, choices } };\r\n\r\n//     // Perform submission logic\r\n//     console.log(feedback); // You can replace this with actual submission logic\r\n//   };\r\n//   render() {\r\n//     const { questions, choices } = this.state;\r\n\r\n//     return (\r\n//       <div className=\"container\">\r\n//         <h1>Feedback form</h1>\r\n//         <form onSubmit={this.handleSubmit}>\r\n//           {questions.map((question, index) => (\r\n//             <div className=\"question-container\" key={index}>\r\n//               <p className=\"question-text\">{question}</p>\r\n//               <div className=\"radio-options\">\r\n//                 <FormControl component=\"fieldset\">\r\n//                   <RadioGroup\r\n//                     value={choices[index]}\r\n//                     onChange={(e) => this.handleChange(index, e.target.value)}\r\n//                     className=\"radio-options\"\r\n//                   >\r\n//                     {/* Check if choices[index] is an array before mapping */}\r\n//                     {Array.isArray(choices[index]) &&\r\n//                       choices[index].map((choice, choiceIndex) => (\r\n//                         <FormControlLabel\r\n//                           key={choiceIndex}\r\n//                           value={choice}\r\n//                           control={<Radio />}\r\n//                           label={choice}\r\n//                         />\r\n//                       ))}\r\n//                   </RadioGroup>\r\n//                 </FormControl>\r\n//               </div>\r\n//             </div>\r\n//           ))}\r\n//           <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n//             Submit\r\n//           </Button>\r\n//         </form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default FeedbackForm;\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Radio,\r\n  RadioGroup,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nclass FeedbackForm extends Component {\r\n  state = {\r\n    questions: [],\r\n    choices: [],\r\n    feedback: {\r\n      questions: [],\r\n      choices: [],\r\n    },\r\n    companyLogo: \"\",\r\n    unitName: \"\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchQuestions();\r\n  }\r\n\r\n  fetchQuestions = () => {\r\n    fetch(\r\n      \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n    )\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(\"Network response was not ok\");\r\n        }\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.status === 1) {\r\n          const questions = data.feedbackQuestions.map((question, index) => ({\r\n            question: question,\r\n            choices: data.choices[index],\r\n            answer: \"\",\r\n          }));\r\n          this.setState({\r\n            questions,\r\n            companyLogo: data.companyLogo,\r\n            unitName: data.unitName,\r\n          });\r\n        } else {\r\n          throw new Error(data.error_msg || \"Error fetching questions\");\r\n        }\r\n      })\r\n      .catch((error) =>\r\n        console.error(\"There was an error fetching the questions:\", error)\r\n      );\r\n  };\r\n\r\n  handleChoiceChange = (index, choice) => {\r\n    const questions = [...this.state.questions];\r\n    questions[index].answer = choice;\r\n    this.setState({ questions });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const feedback = {\r\n      questions: this.state.questions.map((q) => q.question),\r\n      choices: this.state.questions.map((q) => q.answer),\r\n    };\r\n    console.log(\"Feedback submitted:\", feedback);\r\n    // Here you can also post the feedback to a backend endpoint if required\r\n  };\r\n\r\n  renderQuestion = (question, index) => (\r\n    <FormControl component=\"fieldset\" key={index}>\r\n      <FormLabel component=\"legend\">{question.question}</FormLabel>\r\n      <RadioGroup\r\n        aria-label={question.question}\r\n        name={question.question}\r\n        value={question.answer}\r\n        onChange={(event) => this.handleChoiceChange(index, event.target.value)}\r\n      >\r\n        {question.choices.map((choice, choiceIndex) => (\r\n          <FormControlLabel\r\n            key={choiceIndex}\r\n            value={choice}\r\n            control={<Radio />}\r\n            label={choice}\r\n          />\r\n        ))}\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <img src={this.state.companyLogo} alt=\"Company Logo\" />\r\n        <h2>Feedback for {this.state.unitName}</h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          {this.state.questions.map(this.renderQuestion)}\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n            Submit Feedback\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedbackForm;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}