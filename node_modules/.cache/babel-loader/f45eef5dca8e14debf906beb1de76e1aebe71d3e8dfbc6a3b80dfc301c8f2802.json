{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anil kumar\\\\Desktop\\\\techbrj\\\\dynamic-feedback-form\\\\src\\\\FeedbackForm.js\";\n// import React, { Component } from \"react\";\n// import {\n//   Radio,\n//   FormControlLabel,\n//   FormControl,\n//   FormLabel,\n//   Button,\n//   Typography,\n//   Container,\n//   Table,\n//   TableBody,\n//   TableRow,\n//   TableCell,\n//   Grid,\n//   Dialog,\n//   DialogTitle,\n//   DialogContent,\n//   DialogContentText,\n// } from \"@material-ui/core\";\n\n// class FeedbackForm extends Component {\n//   state = {\n//     questions: [],\n//     choices: [],\n//     feedback: {\n//       questions: [],\n//       choices: [],\n//     },\n//     companyLogo: \"\",\n//     unitName: \"\",\n//     showDialog: false, // State to control dialog visibility\n//   };\n\n//   componentDidMount() {\n//     this.fetchQuestions();\n//   }\n\n//   fetchQuestions = () => {\n//     fetch(\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\n//     )\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Network response was not ok\");\n//         }\n//         return response.json();\n//       })\n//       .then((data) => {\n//         if (data.status === 1) {\n//           const questions = data.feedbackQuestions.map((question, index) => ({\n//             question: question,\n//             choices: data.choices[index],\n//             answer: \"\",\n//           }));\n//           this.setState({\n//             questions,\n//             companyLogo: data.companyLogo,\n//             unitName: data.unitName,\n//           });\n//         } else {\n//           throw new Error(data.error_msg || \"Error fetching questions\");\n//         }\n//       })\n//       .catch((error) =>\n//         console.error(\"There was an error fetching the questions:\", error)\n//       );\n//   };\n\n//   handleChoiceChange = (index, choice) => {\n//     const questions = [...this.state.questions];\n//     questions[index].answer = choice;\n//     this.setState({ questions });\n//   };\n\n//   handleSubmit = (event) => {\n//     event.preventDefault();\n//     const feedback = {\n//       questions: this.state.questions.map((q) => q.question),\n//       choices: this.state.questions.map((q) => q.answer),\n//     };\n//     console.log(\"Feedback submitted:\", feedback);\n//     this.setState({ showDialog: true }); // Show the dialog upon form submission\n//     // Here you can also post the feedback to a backend endpoint if required\n//   };\n\n//   handleCloseDialog = () => {\n//     // Close the dialog\n//     this.setState({ showDialog: false }, () => {\n//       // Refresh the page after the dialog is closed\n//       window.location.reload();\n//     });\n//   };\n//   render() {\n//     return (\n//       <Container>\n//         <Grid container spacing={3}>\n//           <Grid item xs={12}>\n//             <img\n//               src={this.state.companyLogo}\n//               alt=\"Company Logo\"\n//               style={{ width: \"150px\", marginBottom: \"20px\" }}\n//             />\n//             <Typography variant=\"h4\">\n//               Feedback for {this.state.unitName}\n//             </Typography>\n//           </Grid>\n//         </Grid>\n\n//         <form onSubmit={this.handleSubmit}>\n//           <Table>\n//             <TableBody>\n//               {this.state.questions.map((question, index) => (\n//                 <TableRow key={index}>\n//                   <TableCell\n//                     style={{\n//                       color: \"rgba(0, 0, 0, 0.87)\",\n//                       border: \"1px solid\",\n//                     }}\n//                   >\n//                     <FormControl component=\"fieldset\">\n//                       <FormLabel component=\"legend\">\n//                         <Typography variant=\"h5\">\n//                           {question.question}\n//                         </Typography>\n//                       </FormLabel>\n//                     </FormControl>\n//                   </TableCell>\n//                   <TableCell\n//                     style={{\n//                       color: \"rgba(0, 0, 0, 0.87)\",\n//                       border: \"1px solid\",\n//                     }}\n//                   >\n//                     <Table>\n//                       <TableBody>\n//                         <TableRow>\n//                           {question.choices.map((choice, choiceIndex) => (\n//                             <TableCell\n//                               style={{\n//                                 color: \"rgba(0, 0, 0, 0.87)\",\n//                                 border: \"1px solid\",\n//                               }}\n//                               key={choiceIndex}\n//                             >\n//                               <FormControlLabel\n//                                 value={choice}\n//                                 control={<Radio />}\n//                                 label={<Typography>{choice}</Typography>}\n//                                 onChange={(event) =>\n//                                   this.handleChoiceChange(index, choice)\n//                                 }\n//                               />\n//                             </TableCell>\n//                           ))}\n//                         </TableRow>\n//                       </TableBody>\n//                     </Table>\n//                   </TableCell>\n//                 </TableRow>\n//               ))}\n//             </TableBody>\n//           </Table>\n//           <Button\n//             style={{ marginTop: \"10px\" }}\n//             type=\"submit\"\n//             variant=\"contained\"\n//             color=\"primary\"\n//           >\n//             Submit Feedback\n//           </Button>\n//         </form>\n\n//         <Dialog\n//           open={this.state.showDialog}\n//           onClose={this.handleCloseDialog}\n//           aria-labelledby=\"feedback-dialog-title\"\n//           aria-describedby=\"feedback-dialog-description\"\n//         >\n//           <DialogTitle id=\"feedback-dialog-title\">\n//             {\"Feedback Submitted Successfully\"}\n//           </DialogTitle>\n//           <DialogContent>\n//             <DialogContentText id=\"feedback-dialog-description\">\n//               Thank you for your feedback. Here's a summary of your responses:\n//               <ul>\n//                 {this.state.questions.map((question, index) => (\n//                   <li key={index}>\n//                     <span style={{ color: \"black\" }}>\n//                       {\" \"}\n//                       {`${question.question}`}\n//                     </span>\n//                     <span style={{ color: \"blue\" }}>\n//                       {\" \"}\n//                       {` ${question.answer}`}\n//                     </span>\n//                   </li>\n//                 ))}\n//               </ul>\n//             </DialogContentText>\n//           </DialogContent>\n//           <Button onClick={this.handleCloseDialog} color=\"primary\">\n//             Close\n//           </Button>\n//         </Dialog>\n//       </Container>\n//     );\n//   }\n// }\n\n// export default FeedbackForm;\n\nimport React, { Component } from \"react\";\nimport { Radio, FormControlLabel, FormControl, FormLabel, Button, Typography, Container, Table, TableBody, TableRow, TableCell, Grid, Dialog, DialogTitle, DialogContent, DialogContentText, RadioGroup } from \"@material-ui/core\";\nclass FeedbackForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questions: [],\n      companyLogo: \"\",\n      unitName: \"\",\n      showDialog: false\n    };\n    this.fetchQuestions = () => {\n      // Dummy fetch function. Replace URL with your actual data source\n      fetch(\"https://yourapi.com/api/get-feedback-questions/?unitID=1\").then(response => response.json()).then(data => {\n        const questions = data.feedbackQuestions.map(question => ({\n          ...question,\n          answer: \"\"\n        }));\n        this.setState({\n          questions,\n          companyLogo: data.companyLogo,\n          unitName: data.unitName\n        });\n      }).catch(error => console.error(\"Error fetching questions:\", error));\n    };\n    this.handleChoiceChange = (event, index) => {\n      const newQuestions = this.state.questions.slice();\n      newQuestions[index].answer = event.target.value;\n      this.setState({\n        questions: newQuestions\n      });\n    };\n    this.handleSubmit = event => {\n      event.preventDefault();\n      // Process submission here\n      console.log(\"Submitted feedback:\", this.state.questions);\n      this.setState({\n        showDialog: true\n      });\n    };\n    this.handleCloseDialog = () => {\n      this.setState({\n        showDialog: false\n      }, () => {\n        window.location.reload();\n      });\n    };\n  }\n  componentDidMount() {\n    this.fetchQuestions();\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.companyLogo,\n      alt: \"Company Logo\",\n      style: {\n        width: \"150px\",\n        marginBottom: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }\n    }, \"Feedback for \", this.state.unitName))), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 13\n      }\n    }, this.state.questions.map((question, index) => /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      component: \"fieldset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      component: \"legend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 23\n      }\n    }, question.question), /*#__PURE__*/React.createElement(RadioGroup, {\n      \"aria-label\": question.question,\n      name: `question${index}`,\n      value: question.answer,\n      onChange: event => this.handleChoiceChange(event, index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 23\n      }\n    }, question.choices.map((choice, choiceIndex) => /*#__PURE__*/React.createElement(FormControlLabel, {\n      key: choiceIndex,\n      value: choice,\n      control: /*#__PURE__*/React.createElement(Radio, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 38\n        }\n      }),\n      label: choice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 27\n      }\n    }))))))))), /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      variant: \"contained\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }\n    }, \"Submit Feedback\")), /*#__PURE__*/React.createElement(Dialog, {\n      open: this.state.showDialog,\n      onClose: this.handleCloseDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }\n    }, \"Feedback Submitted Successfully\"), /*#__PURE__*/React.createElement(DialogContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(DialogContentText, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 13\n      }\n    }, \"Thank you for your feedback. Here's a summary of your responses:\"), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 13\n      }\n    }, this.state.questions.map((question, index) => /*#__PURE__*/React.createElement(\"li\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }\n    }, `${question.question}: ${question.answer}`)))), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleCloseDialog,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }\n    }, \"Close\")));\n  }\n}\nexport default FeedbackForm;","map":{"version":3,"names":["React","Component","Radio","FormControlLabel","FormControl","FormLabel","Button","Typography","Container","Table","TableBody","TableRow","TableCell","Grid","Dialog","DialogTitle","DialogContent","DialogContentText","RadioGroup","FeedbackForm","constructor","args","state","questions","companyLogo","unitName","showDialog","fetchQuestions","fetch","then","response","json","data","feedbackQuestions","map","question","answer","setState","catch","error","console","handleChoiceChange","event","index","newQuestions","slice","target","value","handleSubmit","preventDefault","log","handleCloseDialog","window","location","reload","componentDidMount","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","item","xs","src","alt","style","width","marginBottom","variant","onSubmit","key","component","name","onChange","choices","choice","choiceIndex","control","label","type","color","open","onClose","onClick"],"sources":["C:/Users/anil kumar/Desktop/techbrj/dynamic-feedback-form/src/FeedbackForm.js"],"sourcesContent":["// import React, { Component } from \"react\";\r\n// import {\r\n//   Radio,\r\n//   FormControlLabel,\r\n//   FormControl,\r\n//   FormLabel,\r\n//   Button,\r\n//   Typography,\r\n//   Container,\r\n//   Table,\r\n//   TableBody,\r\n//   TableRow,\r\n//   TableCell,\r\n//   Grid,\r\n//   Dialog,\r\n//   DialogTitle,\r\n//   DialogContent,\r\n//   DialogContentText,\r\n// } from \"@material-ui/core\";\r\n\r\n// class FeedbackForm extends Component {\r\n//   state = {\r\n//     questions: [],\r\n//     choices: [],\r\n//     feedback: {\r\n//       questions: [],\r\n//       choices: [],\r\n//     },\r\n//     companyLogo: \"\",\r\n//     unitName: \"\",\r\n//     showDialog: false, // State to control dialog visibility\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     this.fetchQuestions();\r\n//   }\r\n\r\n//   fetchQuestions = () => {\r\n//     fetch(\r\n//       \"https://brijfeedback.pythonanywhere.com/api/get-feedback-questions/?unitID=1\"\r\n//     )\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Network response was not ok\");\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((data) => {\r\n//         if (data.status === 1) {\r\n//           const questions = data.feedbackQuestions.map((question, index) => ({\r\n//             question: question,\r\n//             choices: data.choices[index],\r\n//             answer: \"\",\r\n//           }));\r\n//           this.setState({\r\n//             questions,\r\n//             companyLogo: data.companyLogo,\r\n//             unitName: data.unitName,\r\n//           });\r\n//         } else {\r\n//           throw new Error(data.error_msg || \"Error fetching questions\");\r\n//         }\r\n//       })\r\n//       .catch((error) =>\r\n//         console.error(\"There was an error fetching the questions:\", error)\r\n//       );\r\n//   };\r\n\r\n//   handleChoiceChange = (index, choice) => {\r\n//     const questions = [...this.state.questions];\r\n//     questions[index].answer = choice;\r\n//     this.setState({ questions });\r\n//   };\r\n\r\n//   handleSubmit = (event) => {\r\n//     event.preventDefault();\r\n//     const feedback = {\r\n//       questions: this.state.questions.map((q) => q.question),\r\n//       choices: this.state.questions.map((q) => q.answer),\r\n//     };\r\n//     console.log(\"Feedback submitted:\", feedback);\r\n//     this.setState({ showDialog: true }); // Show the dialog upon form submission\r\n//     // Here you can also post the feedback to a backend endpoint if required\r\n//   };\r\n\r\n//   handleCloseDialog = () => {\r\n//     // Close the dialog\r\n//     this.setState({ showDialog: false }, () => {\r\n//       // Refresh the page after the dialog is closed\r\n//       window.location.reload();\r\n//     });\r\n//   };\r\n//   render() {\r\n//     return (\r\n//       <Container>\r\n//         <Grid container spacing={3}>\r\n//           <Grid item xs={12}>\r\n//             <img\r\n//               src={this.state.companyLogo}\r\n//               alt=\"Company Logo\"\r\n//               style={{ width: \"150px\", marginBottom: \"20px\" }}\r\n//             />\r\n//             <Typography variant=\"h4\">\r\n//               Feedback for {this.state.unitName}\r\n//             </Typography>\r\n//           </Grid>\r\n//         </Grid>\r\n\r\n//         <form onSubmit={this.handleSubmit}>\r\n//           <Table>\r\n//             <TableBody>\r\n//               {this.state.questions.map((question, index) => (\r\n//                 <TableRow key={index}>\r\n//                   <TableCell\r\n//                     style={{\r\n//                       color: \"rgba(0, 0, 0, 0.87)\",\r\n//                       border: \"1px solid\",\r\n//                     }}\r\n//                   >\r\n//                     <FormControl component=\"fieldset\">\r\n//                       <FormLabel component=\"legend\">\r\n//                         <Typography variant=\"h5\">\r\n//                           {question.question}\r\n//                         </Typography>\r\n//                       </FormLabel>\r\n//                     </FormControl>\r\n//                   </TableCell>\r\n//                   <TableCell\r\n//                     style={{\r\n//                       color: \"rgba(0, 0, 0, 0.87)\",\r\n//                       border: \"1px solid\",\r\n//                     }}\r\n//                   >\r\n//                     <Table>\r\n//                       <TableBody>\r\n//                         <TableRow>\r\n//                           {question.choices.map((choice, choiceIndex) => (\r\n//                             <TableCell\r\n//                               style={{\r\n//                                 color: \"rgba(0, 0, 0, 0.87)\",\r\n//                                 border: \"1px solid\",\r\n//                               }}\r\n//                               key={choiceIndex}\r\n//                             >\r\n//                               <FormControlLabel\r\n//                                 value={choice}\r\n//                                 control={<Radio />}\r\n//                                 label={<Typography>{choice}</Typography>}\r\n//                                 onChange={(event) =>\r\n//                                   this.handleChoiceChange(index, choice)\r\n//                                 }\r\n//                               />\r\n//                             </TableCell>\r\n//                           ))}\r\n//                         </TableRow>\r\n//                       </TableBody>\r\n//                     </Table>\r\n//                   </TableCell>\r\n//                 </TableRow>\r\n//               ))}\r\n//             </TableBody>\r\n//           </Table>\r\n//           <Button\r\n//             style={{ marginTop: \"10px\" }}\r\n//             type=\"submit\"\r\n//             variant=\"contained\"\r\n//             color=\"primary\"\r\n//           >\r\n//             Submit Feedback\r\n//           </Button>\r\n//         </form>\r\n\r\n//         <Dialog\r\n//           open={this.state.showDialog}\r\n//           onClose={this.handleCloseDialog}\r\n//           aria-labelledby=\"feedback-dialog-title\"\r\n//           aria-describedby=\"feedback-dialog-description\"\r\n//         >\r\n//           <DialogTitle id=\"feedback-dialog-title\">\r\n//             {\"Feedback Submitted Successfully\"}\r\n//           </DialogTitle>\r\n//           <DialogContent>\r\n//             <DialogContentText id=\"feedback-dialog-description\">\r\n//               Thank you for your feedback. Here's a summary of your responses:\r\n//               <ul>\r\n//                 {this.state.questions.map((question, index) => (\r\n//                   <li key={index}>\r\n//                     <span style={{ color: \"black\" }}>\r\n//                       {\" \"}\r\n//                       {`${question.question}`}\r\n//                     </span>\r\n//                     <span style={{ color: \"blue\" }}>\r\n//                       {\" \"}\r\n//                       {` ${question.answer}`}\r\n//                     </span>\r\n//                   </li>\r\n//                 ))}\r\n//               </ul>\r\n//             </DialogContentText>\r\n//           </DialogContent>\r\n//           <Button onClick={this.handleCloseDialog} color=\"primary\">\r\n//             Close\r\n//           </Button>\r\n//         </Dialog>\r\n//       </Container>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default FeedbackForm;\r\n\r\nimport React, { Component } from \"react\";\r\nimport {\r\n  Radio,\r\n  FormControlLabel,\r\n  FormControl,\r\n  FormLabel,\r\n  Button,\r\n  Typography,\r\n  Container,\r\n  Table,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Grid,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogContentText,\r\n  RadioGroup,\r\n} from \"@material-ui/core\";\r\n\r\nclass FeedbackForm extends Component {\r\n  state = {\r\n    questions: [],\r\n    companyLogo: \"\",\r\n    unitName: \"\",\r\n    showDialog: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchQuestions();\r\n  }\r\n\r\n  fetchQuestions = () => {\r\n    // Dummy fetch function. Replace URL with your actual data source\r\n    fetch(\"https://yourapi.com/api/get-feedback-questions/?unitID=1\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const questions = data.feedbackQuestions.map((question) => ({\r\n          ...question,\r\n          answer: \"\",\r\n        }));\r\n        this.setState({\r\n          questions,\r\n          companyLogo: data.companyLogo,\r\n          unitName: data.unitName,\r\n        });\r\n      })\r\n      .catch((error) => console.error(\"Error fetching questions:\", error));\r\n  };\r\n\r\n  handleChoiceChange = (event, index) => {\r\n    const newQuestions = this.state.questions.slice();\r\n    newQuestions[index].answer = event.target.value;\r\n    this.setState({ questions: newQuestions });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // Process submission here\r\n    console.log(\"Submitted feedback:\", this.state.questions);\r\n    this.setState({ showDialog: true });\r\n  };\r\n\r\n  handleCloseDialog = () => {\r\n    this.setState({ showDialog: false }, () => {\r\n      window.location.reload();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12}>\r\n            <img\r\n              src={this.state.companyLogo}\r\n              alt=\"Company Logo\"\r\n              style={{ width: \"150px\", marginBottom: \"20px\" }}\r\n            />\r\n            <Typography variant=\"h4\">\r\n              Feedback for {this.state.unitName}\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <form onSubmit={this.handleSubmit}>\r\n          <Table>\r\n            <TableBody>\r\n              {this.state.questions.map((question, index) => (\r\n                <TableRow key={index}>\r\n                  <TableCell>\r\n                    <FormControl component=\"fieldset\">\r\n                      <FormLabel component=\"legend\">\r\n                        {question.question}\r\n                      </FormLabel>\r\n                      <RadioGroup\r\n                        aria-label={question.question}\r\n                        name={`question${index}`}\r\n                        value={question.answer}\r\n                        onChange={(event) =>\r\n                          this.handleChoiceChange(event, index)\r\n                        }\r\n                      >\r\n                        {question.choices.map((choice, choiceIndex) => (\r\n                          <FormControlLabel\r\n                            key={choiceIndex}\r\n                            value={choice}\r\n                            control={<Radio />}\r\n                            label={choice}\r\n                          />\r\n                        ))}\r\n                      </RadioGroup>\r\n                    </FormControl>\r\n                  </TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n          <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n            Submit Feedback\r\n          </Button>\r\n        </form>\r\n\r\n        <Dialog open={this.state.showDialog} onClose={this.handleCloseDialog}>\r\n          <DialogTitle>{\"Feedback Submitted Successfully\"}</DialogTitle>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Thank you for your feedback. Here's a summary of your responses:\r\n            </DialogContentText>\r\n            <ul>\r\n              {this.state.questions.map((question, index) => (\r\n                <li\r\n                  key={index}\r\n                >{`${question.question}: ${question.answer}`}</li>\r\n              ))}\r\n            </ul>\r\n          </DialogContent>\r\n          <Button onClick={this.handleCloseDialog} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </Dialog>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FeedbackForm;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}